ca65 V2.17 - Git 582aa41
Main file   : src/main.s
Current file: src/main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git 582aa41
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_mul
000000r 1               	.import		_io_write
000000r 1               	.import		_io_read
000000r 1               	.import		_root
000000r 1               	.export		_main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; int __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A9 05        	lda     #$05
000002r 1  20 rr rr     	jsr     pusha0
000005r 1  A9 02        	lda     #$02
000007r 1  20 rr rr     	jsr     pusha0
00000Ar 1  A9 E4        	lda     #$E4
00000Cr 1  20 rr rr     	jsr     pusha
00000Fr 1  A9 EA        	lda     #$EA
000011r 1  20 rr rr     	jsr     pusha
000014r 1  A9 7E        	lda     #$7E
000016r 1  20 rr rr     	jsr     pusha
000019r 1  A9 B1        	lda     #$B1
00001Br 1  20 rr rr     	jsr     pusha
00001Er 1  20 rr rr     	jsr     pushl0
000021r 1  A0 0D        	ldy     #$0D
000023r 1  20 rr rr     	jsr     pushwysp
000026r 1  A0 0B        	ldy     #$0B
000028r 1  B1 rr        	lda     (sp),y
00002Ar 1  AA           	tax
00002Br 1  88           	dey
00002Cr 1  B1 rr        	lda     (sp),y
00002Er 1  20 rr rr     	jsr     _mul
000031r 1  20 rr rr     	jsr     steax0sp
000034r 1  20 rr rr     	jsr     ldeax0sp
000037r 1  20 rr rr     	jsr     _io_write
00003Ar 1  20 rr rr     	jsr     _io_read
00003Dr 1  A0 08        	ldy     #$08
00003Fr 1  20 rr rr     	jsr     staxysp
000042r 1  A0 0D        	ldy     #$0D
000044r 1  20 rr rr     	jsr     pushwysp
000047r 1  A0 0B        	ldy     #$0B
000049r 1  B1 rr        	lda     (sp),y
00004Br 1  AA           	tax
00004Cr 1  88           	dey
00004Dr 1  B1 rr        	lda     (sp),y
00004Fr 1  20 rr rr     	jsr     _mul
000052r 1  20 rr rr     	jsr     steax0sp
000055r 1  20 rr rr     	jsr     ldeax0sp
000058r 1  20 rr rr     	jsr     _io_write
00005Br 1  20 rr rr     	jsr     decsp3
00005Er 1  A0 0A        	ldy     #$0A
000060r 1  B1 rr        	lda     (sp),y
000062r 1  A0 02        	ldy     #$02
000064r 1  91 rr        	sta     (sp),y
000066r 1  A0 09        	ldy     #$09
000068r 1  B1 rr        	lda     (sp),y
00006Ar 1  A0 01        	ldy     #$01
00006Cr 1  91 rr        	sta     (sp),y
00006Er 1  A0 08        	ldy     #$08
000070r 1  B1 rr        	lda     (sp),y
000072r 1  A0 00        	ldy     #$00
000074r 1  91 rr        	sta     (sp),y
000076r 1  A0 07        	ldy     #$07
000078r 1  B1 rr        	lda     (sp),y
00007Ar 1  20 rr rr     	jsr     _root
00007Dr 1  20 rr rr     	jsr     steax0sp
000080r 1  20 rr rr     	jsr     ldeax0sp
000083r 1  20 rr rr     	jsr     _io_write
000086r 1  20 rr rr     	jsr     _io_read
000089r 1  A0 07        	ldy     #$07
00008Br 1  91 rr        	sta     (sp),y
00008Dr 1  A9 00        	lda     #$00
00008Fr 1  88           	dey
000090r 1  91 rr        	sta     (sp),y
000092r 1  88           	dey
000093r 1  91 rr        	sta     (sp),y
000095r 1  88           	dey
000096r 1  91 rr        	sta     (sp),y
000098r 1  20 rr rr     	jsr     decsp3
00009Br 1  A0 0A        	ldy     #$0A
00009Dr 1  B1 rr        	lda     (sp),y
00009Fr 1  A0 02        	ldy     #$02
0000A1r 1  91 rr        	sta     (sp),y
0000A3r 1  A0 09        	ldy     #$09
0000A5r 1  B1 rr        	lda     (sp),y
0000A7r 1  A0 01        	ldy     #$01
0000A9r 1  91 rr        	sta     (sp),y
0000ABr 1  A0 08        	ldy     #$08
0000ADr 1  B1 rr        	lda     (sp),y
0000AFr 1  A0 00        	ldy     #$00
0000B1r 1  91 rr        	sta     (sp),y
0000B3r 1  A0 07        	ldy     #$07
0000B5r 1  B1 rr        	lda     (sp),y
0000B7r 1  20 rr rr     	jsr     _root
0000BAr 1  20 rr rr     	jsr     steax0sp
0000BDr 1  20 rr rr     	jsr     ldeax0sp
0000C0r 1  20 rr rr     	jsr     _io_write
0000C3r 1  A2 00        	ldx     #$00
0000C5r 1  8A           	txa
0000C6r 1  A0 0C        	ldy     #$0C
0000C8r 1  4C rr rr     	jmp     addysp
0000CBr 1               
0000CBr 1               .endproc
0000CBr 1               
0000CBr 1               
