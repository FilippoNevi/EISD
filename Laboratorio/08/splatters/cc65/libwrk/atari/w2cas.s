;
; File generated by cc65 v 2.17 - Git 582aa41
;
	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.forceimport	initmainargs
	.import		_stdin
	.import		_stderr
	.import		_fclose
	.import		_fgets
	.import		_fopen
	.import		_fprintf
	.import		_fread
	.import		_printf
	.import		_malloc
	.import		_free
	.import		__heapmaxavail
	.import		_atexit
	.import		_strerror
	.import		_strlen
	.import		__errno
	.import		__sys
	.import		_doesclrscrafterexit
	.import		_cgetc
	.export		_main

.segment	"DATA"

_verbose:
	.word	$0001
_C_dev:
	.byte	$43,$3A,$00

.segment	"RODATA"

L00FF:
	.byte	$43,$49,$4F,$20,$63,$61,$6C,$6C,$20,$74,$6F,$20,$63,$6C,$6F,$73
	.byte	$65,$20,$63,$61,$73,$73,$65,$74,$74,$65,$20,$72,$65,$74,$75,$72
	.byte	$6E,$65,$64,$20,$25,$64,$9B,$00
L0068:
	.byte	$63,$61,$6E,$6E,$6F,$74,$20,$61,$6C,$6C,$6F,$63,$20,$25,$6C,$64
	.byte	$20,$62,$79,$74,$65,$73,$20,$2D,$2D,$20,$61,$62,$6F,$72,$74,$69
	.byte	$6E,$67,$2E,$2E,$2E,$9B,$00
L00C8:
	.byte	$43,$49,$4F,$20,$63,$61,$6C,$6C,$20,$74,$6F,$20,$6F,$70,$65,$6E
	.byte	$20,$63,$61,$73,$73,$65,$74,$74,$65,$20,$72,$65,$74,$75,$72,$6E
	.byte	$65,$64,$20,$25,$64,$9B,$00
L009F:
	.byte	$66,$69,$6C,$65,$20,$69,$73,$20,$74,$6F,$6F,$20,$6C,$61,$72,$67
	.byte	$65,$20,$28,$6D,$75,$73,$74,$20,$62,$65,$20,$3C,$20,$33,$32,$37
	.byte	$36,$38,$29,$9B,$00
L00E3:
	.byte	$43,$49,$4F,$20,$63,$61,$6C,$6C,$20,$74,$6F,$20,$77,$72,$69,$74
	.byte	$65,$20,$66,$69,$6C,$65,$20,$72,$65,$74,$75,$72,$6E,$65,$64,$20
	.byte	$25,$64,$9B,$00
L002B:
	.byte	$75,$73,$69,$6E,$67,$20,$69,$6F,$63,$62,$20,$69,$6E,$64,$65,$78
	.byte	$20,$24,$25,$30,$32,$58,$20,$28,$24,$25,$30,$34,$58,$29,$9B,$00
L0051:
	.byte	$65,$6D,$70,$74,$79,$20,$66,$69,$6C,$65,$6E,$61,$6D,$65,$2C,$20
	.byte	$65,$78,$69,$74,$69,$6E,$67,$2E,$2E,$2E,$9B,$00
L0040	:=	L0051+0
L0021:
	.byte	$63,$6F,$75,$6C,$64,$6E,$27,$74,$20,$66,$69,$6E,$64,$20,$61,$20
	.byte	$66,$72,$65,$65,$20,$69,$6F,$63,$62,$9B,$00
L006F:
	.byte	$62,$75,$66,$66,$65,$72,$20,$73,$69,$7A,$65,$3A,$20,$25,$6C,$64
	.byte	$20,$62,$79,$74,$65,$73,$9B,$00
L00D1:
	.byte	$77,$72,$69,$74,$69,$6E,$67,$20,$74,$6F,$20,$63,$61,$73,$73,$65
	.byte	$74,$74,$65,$2E,$2E,$2E,$9B,$00
L0086:
	.byte	$72,$65,$61,$64,$69,$6E,$67,$20,$69,$6E,$70,$75,$74,$20,$66,$69
	.byte	$6C,$65,$2E,$2E,$2E,$9B,$00
L007D:
	.byte	$63,$61,$6E,$6E,$6F,$74,$20,$6F,$70,$65,$6E,$20,$27,$25,$73,$27
	.byte	$3A,$20,$25,$73,$9B,$00
L00AC:
	.byte	$66,$69,$6C,$65,$20,$73,$69,$7A,$65,$3A,$20,$25,$6C,$64,$20,$62
	.byte	$79,$74,$65,$73,$9B,$00
L00B4:
	.byte	$6F,$70,$65,$6E,$69,$6E,$67,$20,$63,$61,$73,$73,$65,$74,$74,$65
	.byte	$2E,$2E,$2E,$9B,$00
L00A6:
	.byte	$6E,$6F,$74,$20,$65,$6E,$6F,$75,$67,$68,$20,$6D,$65,$6D,$6F,$72
	.byte	$79,$9B,$00
L0092:
	.byte	$72,$65,$61,$64,$20,$65,$72,$72,$6F,$72,$9B,$00
L0033:
	.byte	$9B,$66,$69,$6C,$65,$6E,$61,$6D,$65,$3A,$20,$00
L0104:
	.byte	$73,$75,$63,$63,$65,$73,$73,$9B,$00
L0075:
	.byte	$72,$62,$00
L003B	:=	L00FF+38

; ---------------------------------------------------------------
; __near__ struct __iocb * __near__ findfreeiocb (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findfreeiocb: near

.segment	"CODE"

	ldx     #$03
	lda     #$40
	jsr     pushax
	jsr     decsp2
	ldx     #$00
	txa
L0109:	jsr     stax0sp
	cmp     #$08
	txa
	sbc     #$00
	bvc     L000E
	eor     #$80
L000E:	asl     a
	lda     #$00
	tax
	bcc     L0004
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$FF
	bne     L0010
	ldy     #$03
	jsr     ldaxysp
	jmp     incsp4
L0010:	ldy     #$03
	jsr     ldaxysp
	ldy     #$10
	jsr     incaxy
	ldy     #$02
	jsr     staxysp
	jsr     ldax0sp
	jsr     incax1
	jmp     L0109
L0004:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ __cdecl__ main (int, __near__ __near__ unsigned char * *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldy     #$1E
	jsr     subysp
	ldx     #$80
	lda     #$01
	jsr     pushax
	jsr     decsp6
	jsr     _findfreeiocb
	jsr     pushax
	jsr     decsp2
	jsr     _doesclrscrafterexit
	tax
	beq     L0019
	lda     #<(_cgetc)
	ldx     #>(_cgetc)
	jsr     _atexit
L0019:	ldy     #$03
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L001D
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L0021)
	ldx     #>(L0021)
	jsr     pushax
	ldy     #$04
	jsr     _fprintf
	ldx     #$00
	lda     #$01
	jmp     L0015
L001D:	iny
	jsr     ldaxysp
	sec
	sbc     #$40
	pha
	txa
	sbc     #$03
	tax
	pla
	jsr     asrax4
	jsr     aslax4
	jsr     stax0sp
	lda     _verbose
	ora     _verbose+1
	beq     L0028
	lda     #<(L002B)
	ldx     #>(L002B)
	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$06
	jsr     _printf
L0028:	ldy     #$2D
	jsr     ldaxysp
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0031
	eor     #$80
L0031:	jpl     L002F
	lda     #<(L0033)
	ldx     #>(L0033)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #$12
	jsr     leaa0sp
	jsr     pushax
	lda     #$13
	jsr     pusha0
	lda     _stdin
	ldx     _stdin+1
	jsr     _fgets
	ldy     #$26
	jsr     staxysp
	lda     #<(L003B)
	ldx     #>(L003B)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldy     #$27
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L003D
	lda     #<(L0040)
	ldx     #>(L0040)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$01
	jmp     L0015
L003D:	iny
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L0043
	ldy     #$29
	jsr     pushwysp
	ldy     #$29
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	jsr     decax1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$9B
	bne     L0043
	ldy     #$29
	jsr     pushwysp
	ldy     #$29
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosaddax
	jsr     decax1
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
L0043:	ldy     #$27
	jsr     ldaxysp
	jsr     _strlen
	stx     tmp1
	ora     tmp1
	bne     L004D
	lda     #<(L0051)
	ldx     #>(L0051)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$01
	jmp     L0015
L004D:	ldy     #$27
	jsr     ldaxysp
	jmp     L010F
L002F:	ldy     #$2B
	jsr     ldaxysp
	jsr     incax2
	jsr     ldaxi
L010F:	ldy     #$28
	jsr     staxysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     _malloc
	ldy     #$0E
	jsr     staxysp
	ldy     #$0F
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L0064
	jsr     __heapmaxavail
	ldy     #$0A
	jsr     staxysp
	jsr     _malloc
	ldy     #$0E
	jsr     staxysp
	ldy     #$0F
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L0064
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L0068)
	ldx     #>(L0068)
	jsr     pushax
	ldy     #$0F
	jsr     ldaxysp
	jsr     axulong
	jsr     pusheax
	ldy     #$08
	jsr     _fprintf
	ldx     #$00
	lda     #$01
	jmp     L0015
L0064:	lda     _verbose
	ora     _verbose+1
	beq     L006C
	lda     #<(L006F)
	ldx     #>(L006F)
	jsr     pushax
	ldy     #$0D
	jsr     ldaxysp
	jsr     axulong
	jsr     pusheax
	ldy     #$06
	jsr     _printf
L006C:	ldy     #$2B
	jsr     pushwysp
	lda     #<(L0075)
	ldx     #>(L0075)
	jsr     _fopen
	ldy     #$10
	jsr     staxysp
	ldy     #$11
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L0077
	dey
	jsr     ldaxysp
	jsr     _free
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L007D)
	ldx     #>(L007D)
	jsr     pushax
	ldy     #$2F
	jsr     pushwysp
	lda     __errno
	ldx     __errno+1
	jsr     _strerror
	jsr     pushax
	ldy     #$08
	jsr     _fprintf
	ldx     #$00
	lda     #$01
	jmp     L0015
L0077:	lda     _verbose
	ora     _verbose+1
	beq     L0083
	lda     #<(L0086)
	ldx     #>(L0086)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L0083:	ldy     #$11
	jsr     pushwysp
	lda     #$01
	jsr     pusha0
	ldy     #$11
	jsr     pushwysp
	ldy     #$17
	jsr     ldaxysp
	jsr     _fread
	ldy     #$0C
	jsr     staxysp
	ldy     #$0D
	lda     (sp),y
	dey
	ora     (sp),y
	bne     L008E
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L0092)
	ldx     #>(L0092)
L0111:	jsr     pushax
	ldy     #$04
	jsr     _fprintf
	ldy     #$11
	jsr     ldaxysp
	jsr     _fclose
	ldy     #$0F
	jsr     ldaxysp
	jsr     _free
	ldx     #$00
	lda     #$01
	jmp     L0015
L008E:	iny
	jsr     ldaxysp
	jsr     axulong
	cmp     #$00
	txa
	sbc     #$80
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcc     L009B
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L009F)
	ldx     #>(L009F)
	jmp     L0111
L009B:	ldy     #$0F
	jsr     pushwysp
	ldy     #$0D
	jsr     ldaxysp
	jsr     tosicmp
	bne     L00A2
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L00A6)
	ldx     #>(L00A6)
	jmp     L0111
L00A2:	lda     _verbose
	ora     _verbose+1
	beq     L00A9
	lda     #<(L00AC)
	ldx     #>(L00AC)
	jsr     pushax
	ldy     #$0F
	jsr     ldaxysp
	jsr     axulong
	jsr     pusheax
	ldy     #$06
	jsr     _printf
L00A9:	ldy     #$11
	jsr     ldaxysp
	jsr     _fclose
	lda     _verbose
	ora     _verbose+1
	beq     L00B1
	lda     #<(L00B4)
	ldx     #>(L00B4)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L00B1:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #<(_C_dev)
	ldy     #$04
	sta     (ptr1),y
	iny
	lda     #>(_C_dev)
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$08
	ldy     #$0A
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$80
	ldy     #$0B
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$03
	ldy     #$02
	sta     (ptr1),y
	ldy     #$00
	lda     (sp),y
	ldy     #$05
	sta     (sp),y
	ldx     #$E4
	lda     #$56
	ldy     #$08
	jsr     staxysp
	lda     #$04
	jsr     leaa0sp
	jsr     __sys
	ldy     #$06
	lda     (sp),y
	cmp     #$01
	beq     L00C4
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L00C8)
	ldx     #>(L00C8)
	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	ldy     #$06
	jsr     _fprintf
	ldy     #$0F
	jsr     ldaxysp
	jsr     _free
	ldx     #$00
	lda     #$01
	jmp     L0015
L00C4:	lda     _verbose
	ora     _verbose+1
	beq     L00CE
	lda     #<(L00D1)
	ldx     #>(L00D1)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L00CE:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	jsr     ldaxysp
	ldy     #$04
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0D
	jsr     ldaxysp
	ldy     #$08
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$0B
	ldy     #$02
	sta     (ptr1),y
	ldy     #$00
	lda     (sp),y
	ldy     #$05
	sta     (sp),y
	ldx     #$E4
	lda     #$56
	ldy     #$08
	jsr     staxysp
	lda     #$04
	jsr     leaa0sp
	jsr     __sys
	ldy     #$06
	lda     (sp),y
	cmp     #$01
	beq     L00DF
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L00E3)
	ldx     #>(L00E3)
	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	ldy     #$06
	jsr     _fprintf
	ldy     #$0F
	jsr     ldaxysp
	jsr     _free
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$0C
	ldy     #$02
	sta     (ptr1),y
	ldy     #$00
	lda     (sp),y
	ldy     #$05
	sta     (sp),y
	ldx     #$E4
	lda     #$56
	ldy     #$08
	jsr     staxysp
	lda     #$04
	jsr     leaa0sp
	jsr     __sys
	ldx     #$00
	lda     #$01
	jmp     L0015
L00DF:	ldy     #$0F
	jsr     ldaxysp
	jsr     _free
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$0C
	ldy     #$02
	sta     (ptr1),y
	ldy     #$00
	lda     (sp),y
	ldy     #$05
	sta     (sp),y
	ldx     #$E4
	lda     #$56
	ldy     #$08
	jsr     staxysp
	lda     #$04
	jsr     leaa0sp
	jsr     __sys
	ldy     #$06
	lda     (sp),y
	cmp     #$01
	beq     L00FB
	lda     _stderr
	ldx     _stderr+1
	jsr     pushax
	lda     #<(L00FF)
	ldx     #>(L00FF)
	jsr     pushax
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	ldy     #$06
	jsr     _fprintf
	ldx     #$00
	lda     #$01
	jmp     L0015
L00FB:	lda     #<(L0104)
	ldx     #>(L0104)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	txa
L0015:	ldy     #$2E
	jmp     addysp

.endproc

