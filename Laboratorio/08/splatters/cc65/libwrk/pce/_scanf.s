;
; File generated by cc65 v 2.17 - Git 582aa41
;
	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
	.setcpu		"HUC6280"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_memset
	.import		__setjmp
	.import		_longjmp
	.import		__seterrno
	.import		_isdigit
	.import		_isspace
	.import		_isxdigit
	.import		_tolower
	.export		__scanf

.segment	"RODATA"

_Bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80

.segment	"BSS"

_format:
	.res	2,$00
_D_:
	.res	2,$00
_ap:
	.res	2,$00
_JumpBuf:
	.res	5,$00
_F:
	.res	1,$00
_CharCount:
	.res	2,$00
_C:
	.res	2,$00
_Width:
	.res	2,$00
_IntVal:
	.res	4,$00
_Assignments:
	.res	2,$00
_IntBytes:
	.res	1,$00
_Converted:
	.res	1,$00
_Positive:
	.res	1,$00
_NoAssign:
	.res	1,$00
_Invert:
	.res	1,$00
_CharSet:
	.res	32,$00

; ---------------------------------------------------------------
; int __near__ __fastcall__ _scanf (__near__ const struct scanfdata *, __near__ const unsigned char *, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	__scanf: near

.segment	"RODATA"

L01B5:
	.word	$0000
L02BC:
	.word	$0000
L02CB:
	.word	$0000
L02DA:
	.word	$0000

.segment	"BSS"

L0191:
	.res	1,$00
L0192:
	.res	1,$00
L0193:
	.res	1,$00

.segment	"CODE"

	jsr     pushax
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	sta     _D_
	stx     _D_+1
	ldy     #$05
	jsr     ldaxysp
	sta     _format
	stx     _format+1
	ldy     #$03
	jsr     ldaxysp
	sta     _ap
	stx     _ap+1
	stz     _Converted
	stz     _Assignments
	stz     _Assignments+1
	stz     _CharCount
	stz     _CharCount+1
	lda     #<(_JumpBuf)
	ldx     #>(_JumpBuf)
	jsr     __setjmp
	cmp     #$00
	jne     L01A0
L01A3:	jsr     _ReadChar
	jmp     L01FE
L01A6:	lda     _F
	cmp     #$25
	beq     L01AA
	ldx     #$00
	jsr     _isspace
	tax
	beq     L01AC
	jsr     _SkipWhite
	jmp     L01FE
L01AC:	lda     _C
	ldx     _C+1
	jsr     pushax
	lda     _F
	jsr     tosicmp0
	beq     L01A3
	jmp     L01A0
L01AA:	jsr     _GetFormat
	cmp     #$25
	beq     L01AC
	lda     _F
	cmp     #$2A
	jsr     booleq
	sta     _NoAssign
	lda     _NoAssign
	beq     L01BE
	jsr     _GetFormat
L01BE:	lda     #$FF
	sta     _Width
	sta     _Width+1
	lda     _F
	ldx     #$00
	jsr     _isdigit
	sta     L0191
	lda     L0191
	beq     L01CB
	stz     _Width
	stz     _Width+1
L01CA:	lda     _Width
	ldx     _Width+1
	jsr     mulax10
	sta     ptr1
	stx     ptr1+1
	lda     _F
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0335
	inx
L0335:	sta     _Width
	stx     _Width+1
	jsr     _GetFormat
	ldx     #$00
	jsr     _isdigit
	tax
	bne     L01CA
L01CB:	lda     _Width
	ora     _Width+1
	bne     L01D2
	lda     #$07
	jsr     __seterrno
	jmp     L033C
L01D2:	lda     _Width
	ldx     _Width+1
	jsr     complax
	sta     _Width
	stx     _Width+1
	lda     #$01
	sta     _IntBytes
	lda     _F
	cmp     #$4C
	beq     L01F6
	cmp     #$68
	beq     L01E3
	cmp     #$6A
	beq     L0322
	cmp     #$6C
	beq     L01EC
	cmp     #$74
	beq     L01F6
	cmp     #$7A
	beq     L01F6
	bra     L0323
L01E3:	lda     _format+1
	sta     ptr1+1
	lda     _format
	sta     ptr1
	lda     (ptr1)
	cmp     #$68
	bne     L01F6
	stz     _IntBytes
	inc     _format
	bne     L01F6
	inc     _format+1
	bra     L01F6
L01EC:	lda     _format+1
	sta     ptr1+1
	lda     _format
	sta     ptr1
	lda     (ptr1)
	cmp     #$6C
	bne     L0322
	inc     _format
	bne     L0322
	inc     _format+1
L0322:	lda     #$03
	sta     _IntBytes
L01F6:	jsr     _GetFormat
L0323:	lda     _F
	cmp     #$41
	jeq     L02F0
	cmp     #$43
	jeq     L02F0
	cmp     #$45
	jeq     L02F0
	cmp     #$46
	jeq     L02F0
	cmp     #$47
	jeq     L02F0
	cmp     #$53
	jeq     L02F0
	cmp     #$58
	beq     L020E
	cmp     #$5B
	jeq     L0260
	cmp     #$61
	jeq     L02F0
	cmp     #$63
	jeq     L0328
	cmp     #$64
	beq     L0200
	cmp     #$65
	jeq     L02F0
	cmp     #$66
	jeq     L02F0
	cmp     #$67
	jeq     L02F0
	cmp     #$69
	beq     L0206
	cmp     #$6E
	jeq     L02E0
	cmp     #$6F
	beq     L020A
	cmp     #$70
	jeq     L02C4
	cmp     #$73
	beq     L0214
	cmp     #$75
	beq     L0200
	cmp     #$78
	beq     L020E
	jmp     L0309
L0200:	lda     #$0A
	jsr     _ScanInt
	jmp     L01FE
L0206:	lda     #$00
	jsr     _ScanInt
	jmp     L01FE
L020A:	lda     #$08
	jsr     _ScanInt
	jmp     L01FE
L020E:	lda     #$10
	jsr     _ScanInt
	jmp     L01FE
L0214:	jsr     _SkipWhite
	jsr     _CheckEnd
	lda     #$01
	sta     _Converted
	lda     _NoAssign
	bne     L0225
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L0222
	dec     _ap+1
L0222:	ldx     _ap+1
	jsr     ldaxi
	sta     regbank+4
	stx     regbank+4+1
	bra     L0225
L0324:	lda     _NoAssign
	bne     L022C
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L022F
	inx
L022F:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
L022C:	jsr     _ReadChar
L0225:	lda     _C+1
	cmp     #$FF
	bne     L0336
	lda     _C
	cmp     #$FF
	beq     L0327
L0336:	lda     _C
	ldx     _C+1
	jsr     _isspace
	cmp     #$00
	bne     L0327
	inc     _Width
	bne     L022A
	inc     _Width+1
L022A:	lda     _Width
	ora     _Width+1
	bne     L0324
L0327:	lda     _NoAssign
	jne     L01FE
	sta     (regbank+4)
	inc     _Assignments
	jne     L01FE
	inc     _Assignments+1
	jmp     L01FE
L0328:	lda     L0191
	bne     L023A
	ldx     #$FF
	lda     #$FE
	sta     _Width
	stx     _Width+1
L023A:	jsr     _CheckEnd
	lda     #$01
	sta     _Converted
	lda     _NoAssign
	bne     L025A
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L024A
	dec     _ap+1
L024A:	ldx     _ap+1
	jsr     ldaxi
	sta     regbank+4
	stx     regbank+4+1
	bra     L024D
L024B:	jsr     _CheckEnd
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L0252
	inx
L0252:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
	jsr     _ReadChar
L024D:	inc     _Width
	bne     L024F
	inc     _Width+1
L024F:	lda     _Width
	ora     _Width+1
	bne     L024B
	inc     _Assignments
	jne     L01FE
	inc     _Assignments+1
	jmp     L01FE
L0258:	jsr     _CheckEnd
	jsr     _ReadChar
L025A:	inc     _Width
	bne     L025C
	inc     _Width+1
L025C:	lda     _Width
	ora     _Width+1
	bne     L0258
	jmp     L01FE
L0260:	lda     #>(_CharSet)
	sta     ptr1+1
	lda     #<(_CharSet)
	sta     ptr1
	lda     #$00
	ldy     #$1F
L031B:	sta     (ptr1),y
	dey
	bpl     L031B
	jsr     _GetFormat
	cmp     #$5E
	jsr     booleq
	sta     _Invert
	lda     _Invert
	beq     L0329
	jsr     _GetFormat
L0329:	lda     _F
	cmp     #$5D
	bne     L032A
	bra     L0277
L0271:	lda     _format+1
	sta     ptr1+1
	lda     _format
	sta     ptr1
	lda     (ptr1)
	cmp     #$2D
	bne     L0277
	lda     _F
	sta     L0193
	inc     _format
	bne     L027C
	inc     _format+1
L027C:	jsr     _GetFormat
	cmp     #$00
	beq     L0281
	cmp     #$5D
	bne     L0289
L0281:	lda     L0193
	jsr     _AddCharToSet
	lda     #$2D
	jsr     _AddCharToSet
	bra     L032A
L0289:	lda     L0193
	jsr     _AddCharToSet
	lda     _F
	cmp     L0193
	beq     L0321
	inc     L0193
	bra     L0289
L0277:	lda     _F
	jsr     _AddCharToSet
L0321:	jsr     _GetFormat
L032A:	lda     _F
	beq     L032E
	cmp     #$5D
	bne     L0271
L032E:	lda     _F
	bne     L0297
	lda     _format
	sec
	sbc     #$01
	sta     _format
	bcs     L0297
	dec     _format+1
L0297:	lda     _Invert
	beq     L0339
	jsr     _InvertCharSet
L0339:	stz     L0192
	lda     _NoAssign
	bne     L02AC
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L02A9
	dec     _ap+1
L02A9:	ldx     _ap+1
	jsr     ldaxi
	sta     regbank+4
	stx     regbank+4+1
	bra     L02AC
L032F:	lda     _NoAssign
	bne     L0330
	lda     regbank+4
	ldx     regbank+4+1
	sta     regsave
	stx     regsave+1
	ina
	bne     L02B4
	inx
L02B4:	sta     regbank+4
	stx     regbank+4+1
	lda     _C
	sta     (regsave)
L0330:	lda     #$01
	sta     _Converted
	sta     L0192
	jsr     _ReadChar
L02AC:	jsr     _IsCharInSet
	tax
	beq     L0333
	inc     _Width
	bne     L02AF
	inc     _Width+1
L02AF:	lda     _Width
	ora     _Width+1
	bne     L032F
L0333:	lda     L0192
	jeq     L01A0
	lda     _NoAssign
	jne     L01FE
	sta     (regbank+4)
	inc     _Assignments
	jne     L01FE
	inc     _Assignments+1
	jmp     L01FE
L02C4:	jsr     _SkipWhite
	lda     _C
	cmp     #$30
	jne     L01A0
	lda     #$01
	sta     _Converted
	jsr     _ReadChar
	lda     _C
	cmp     #$58
	beq     L02D4
	cmp     #$78
	bne     L01A0
L02D4:	jsr     _ReadChar
	lda     #$10
	jsr     _ReadInt
	jsr     _AssignInt
	bra     L01FE
L02E0:	lda     _CharCount
	ldx     _CharCount+1
	jsr     pushax
	lda     _C+1
	cmp     #$FF
	bne     L02E6
	lda     _C
	cmp     #$FF
	bne     L02E6
	ina
	bra     L02E8
L02E6:	lda     #$01
L02E8:	jsr     tossuba0
	jsr     axulong
	sta     _IntVal
	stx     _IntVal+1
	ldy     sreg
	sty     _IntVal+2
	ldy     sreg+1
	sty     _IntVal+3
	jsr     _AssignInt
	lda     _NoAssign
	bne     L01FE
	lda     _Assignments
	sec
	sbc     #$01
	sta     _Assignments
	bcs     L01FE
	dec     _Assignments+1
	bra     L01FE
L02F0:	lda     #$0D
	jsr     __seterrno
	bra     L033C
L0309:	lda     #$07
	jsr     __seterrno
	bra     L033C
L01FE:	jsr     _GetFormat
	tax
	jne     L01A6
	bra     L0312
L01A0:	lda     _C+1
	cmp     #$FF
	bne     L0312
	lda     _C
	cmp     #$FF
	bne     L0312
	lda     _Converted
	bne     L0312
L033C:	lda     #$FF
	sta     _Assignments
	sta     _Assignments+1
L0312:	jsr     _PushBack
	lda     _Assignments
	ldx     _Assignments+1
	pha
	lda     (sp)
	sta     regbank+4
	ldy     #$01
	lda     (sp),y
	sta     regbank+5
	pla
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ FindBit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FindBit: near

.segment	"CODE"

	pha
	lsr     a
	lsr     a
	lsr     a
	tax
	pla
	and     #$07
	tay
	lda     _Bits,y
	jmp     L0010
L0010:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ AddCharToSet (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AddCharToSet: near

.segment	"CODE"

	jsr     pusha
	jsr     _FindBit
	ora     _CharSet,x
	sta     _CharSet,x
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsCharInSet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsCharInSet: near

.segment	"CODE"

	lda     #$00
	ldx     _C+1
	bne     L1
	lda     _C
	jsr     _FindBit
	and     _CharSet,x
L1:	ldx     #$00
	jmp     L002D
L002D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InvertCharSet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InvertCharSet: near

.segment	"CODE"

	ldy     #$1F
L1:	lda     _CharSet,y
	eor     #$FF
	sta     _CharSet,y
	dey
	bpl     L1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ PushBack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_PushBack: near

.segment	"CODE"

	ldx     _C+1
	bne     L0055
	lda     _C
	jsr     pusha0
	lda     _D_+1
	sta     ptr1+1
	lda     _D_
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	sta     jmpvec+1
	iny
	lda     (ptr1),y
	sta     jmpvec+2
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     jmpvec
	lda     _CharCount
	bne     L0083
	dec     _CharCount+1
L0083:	dec     _CharCount
L0055:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ReadChar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadChar: near

.segment	"CODE"

	lda     _D_+1
	sta     ptr1+1
	lda     _D_
	sta     ptr1
	lda     (ptr1)
	sta     jmpvec+1
	ldy     #$01
	lda     (ptr1),y
	sta     jmpvec+2
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     jmpvec
	sta     _C
	stx     _C+1
	inx
	beq     L00BA
	inc     _CharCount
	bne     L00BA
	inc     _CharCount+1
L00BA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ Error (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Error: near

.segment	"CODE"

	jsr     pusha
	pha
	lda     #<(_JumpBuf)
	ldx     #>(_JumpBuf)
	jsr     pushax
	pla
	ldx     #>$0000
	jmp     _longjmp
	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ CheckEnd (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CheckEnd: near

.segment	"CODE"

	ldx     _C+1
	beq     L00D8
	lda     #$02
	jmp     _Error
L00D8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ SkipWhite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SkipWhite: near

.segment	"CODE"

	bra     L00E0
L00DE:	jsr     _ReadChar
L00E0:	lda     _C
	ldx     _C+1
	jsr     _isspace
	tax
	bne     L00DE
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ReadSign (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadSign: near

.segment	"CODE"

	lda     _C
	cmp     #'-'
	bne     L00EC
	sta     _Converted
	jsr     _ReadChar
	lda     #$00
	beq     L00F6
L00EC:	cmp     #'+'
	bne     L00FD
	sta     _Converted
	jsr     _ReadChar
L00FD:	lda     #$01
L00F6:	sta     _Positive
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ HexVal (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HexVal: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	ldx     #$00
	jsr     _isdigit
	beq     L010D
	ldx     #$00
	lda     (sp)
	ldy     #$30
	bra     L033D
L010D:	lda     (sp)
	ldx     #$00
	jsr     _tolower
	ldx     #$00
	ldy     #$57
L033D:	jsr     decaxy
	ldx     #$00
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ ReadInt (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ReadInt: near

.segment	"BSS"

L0114:
	.res	1,$00
L0115:
	.res	1,$00

.segment	"CODE"

	jsr     pusha
	stz     L0115
	stz     _IntVal
	stz     _IntVal+1
	stz     _IntVal+2
	stz     _IntVal+3
	bra     L011B
L033F:	inc     L0115
	lda     _IntVal+3
	sta     sreg+1
	lda     _IntVal+2
	sta     sreg
	ldx     _IntVal+1
	lda     _IntVal
	jsr     pusheax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aulong
	jsr     axulong
	jsr     tosmuleax
	jsr     pusheax
	ldx     #$00
	lda     L0114
	jsr     aulong
	jsr     axulong
	jsr     tosaddeax
	sta     _IntVal
	stx     _IntVal+1
	ldy     sreg
	sty     _IntVal+2
	ldy     sreg+1
	sty     _IntVal+3
	jsr     _ReadChar
L011B:	lda     _C
	ldx     _C+1
	jsr     _isxdigit
	tax
	beq     L0342
	inc     _Width
	bne     L011F
	inc     _Width+1
L011F:	lda     _Width
	ora     _Width+1
	beq     L0342
	lda     _C
	jsr     _HexVal
	sta     L0114
	cmp     (sp)
	txa
	sbc     #$00
	bcc     L033F
L0342:	lda     L0115
	bne     L0343
	ina
	jsr     _Error
L0343:	lda     #$01
	sta     _Converted
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ AssignInt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AssignInt: near

.segment	"CODE"

	lda     _NoAssign
	bne     L014F
	lda     _ap
	sec
	sbc     #$02
	sta     _ap
	bcs     L0139
	dec     _ap+1
L0139:	ldx     _ap+1
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldy     _IntBytes
L0140:	lda     _IntVal,y
	sta     (ptr1),y
	dey
	bpl     L0140
	inc     _Assignments
	bne     L014F
	inc     _Assignments+1
L014F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ ScanInt (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ScanInt: near

.segment	"CODE"

	jsr     pusha
	jsr     _SkipWhite
	jsr     _ReadSign
	lda     (sp)
	bne     L0347
	lda     _C
	cmp     #$30
	bne     L0346
	jsr     _ReadChar
	lda     _C
	cmp     #$58
	beq     L0344
	cmp     #$78
	bne     L0345
L0344:	lda     #$10
	sta     (sp)
	lda     #$01
	sta     _Converted
	jsr     _ReadChar
	bra     L0347
L0345:	lda     #$08
	sta     (sp)
	jsr     _PushBack
	lda     #$30
	sta     _C
	stz     _C+1
	bra     L0347
L0346:	lda     #$0A
	sta     (sp)
L0347:	lda     (sp)
	jsr     _ReadInt
	lda     _Positive
	bne     L0179
	lda     _IntVal+3
	sta     sreg+1
	lda     _IntVal+2
	sta     sreg
	ldx     _IntVal+1
	lda     _IntVal
	jsr     negeax
	sta     _IntVal
	stx     _IntVal+1
	ldy     sreg
	sty     _IntVal+2
	ldy     sreg+1
	sty     _IntVal+3
L0179:	jsr     _AssignInt
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetFormat (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetFormat: near

.segment	"CODE"

	lda     _format+1
	sta     regsave+1
	lda     _format
	sta     regsave
	inc     _format
	bne     L0186
	inc     _format+1
L0186:	lda     (regsave)
	ldx     #>$0000
	sta     _F
	rts

.endproc

