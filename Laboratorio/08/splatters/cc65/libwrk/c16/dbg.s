;
; File generated by cc65 v 2.17 - Git 582aa41
;
	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_exit
	.import		_strlen
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_wherex
	.import		_cputc
	.import		_cputcxy
	.import		_cputsxy
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_chline
	.import		_chlinexy
	.import		_cvlinexy
	.import		_cclearxy
	.import		_cputhex8
	.import		_cputhex16
	.import		_isalnum
	.import		_isdigit
	.import		_isxdigit
	.import		_toupper
	.import		_brk_a
	.import		_brk_x
	.import		_brk_y
	.import		_brk_sr
	.import		_brk_pc
	.import		_DbgDisAsm
	.import		_DbgDisAsmLen
	.import		_DbgIsRAM
	.import		_DbgMemDump
	.import		_DbgSP
	.import		_DbgCS
	.import		_DbgHI
	.export		_DbgBreakCount
	.export		_DbgBreaks
	.import		_DbgGetBreakSlot
	.import		_DbgIsBreak
	.export		_DbgEntry

.segment	"DATA"

_ActiveFrame:
	.word	$FFFF
_ActivePrompt:
	.word	$0000
_DbgBreakCount:
	.byte	$00

.segment	"RODATA"

_RegText:
	.byte	$01
	.byte	$00
	.addr	L0006
	.byte	$01
	.byte	$01
	.addr	L000A
	.byte	$01
	.byte	$02
	.addr	L000E
	.byte	$01
	.byte	$03
	.addr	L0012
	.byte	$01
	.byte	$04
	.addr	L0016
	.byte	$01
	.byte	$05
	.addr	L001A
	.byte	$01
	.byte	$06
	.addr	L001E
	.byte	$01
	.byte	$07
	.addr	L0022
_HelpText:
	.byte	$01
	.byte	$00
	.addr	L0026
	.byte	$01
	.byte	$01
	.addr	L002A
	.byte	$01
	.byte	$02
	.addr	L002E
	.byte	$01
	.byte	$03
	.addr	L0032
	.byte	$01
	.byte	$04
	.addr	L0036
	.byte	$01
	.byte	$05
	.addr	L003A
	.byte	$01
	.byte	$06
	.addr	L003E
	.byte	$01
	.byte	$07
	.addr	L0042
	.byte	$01
	.byte	$08
	.addr	L0046
	.byte	$01
	.byte	$09
	.addr	L004A
	.byte	$01
	.byte	$0A
	.addr	L004E
	.byte	$01
	.byte	$0B
	.addr	L0052
	.byte	$01
	.byte	$0C
	.addr	L0056
	.byte	$01
	.byte	$0D
	.addr	L005A
	.byte	$01
	.byte	$0E
	.addr	L005E
	.byte	$01
	.byte	$0F
	.addr	L0062
	.byte	$01
	.byte	$10
	.addr	L0066
	.byte	$01
	.byte	$11
	.addr	L006A
_AsmFrame:
	.byte	$B0
	.byte	$B2
	.byte	$AB
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$0F
	.byte	$1D
	.byte	$0E
	.byte	$01
	.addr	_AsmHandler
	.byte	$00
	.word	$0000
_RegFrame:
	.byte	$B2
	.byte	$AE
	.byte	$AB
	.byte	$B3
	.byte	$1E
	.byte	$00
	.byte	$27
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_RegHandler
	.byte	$08
	.addr	_RegText
_StackFrame:
	.byte	$AB
	.byte	$B3
	.byte	$DB
	.byte	$B3
	.byte	$1E
	.byte	$09
	.byte	$27
	.byte	$0F
	.byte	$08
	.byte	$05
	.byte	$01
	.addr	_StackHandler
	.byte	$00
	.word	$0000
_CStackFrame:
	.byte	$DB
	.byte	$B3
	.byte	$B1
	.byte	$BD
	.byte	$1E
	.byte	$0F
	.byte	$27
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_CStackHandler
	.byte	$00
	.word	$0000
_DumpFrame:
	.byte	$AB
	.byte	$DB
	.byte	$AD
	.byte	$B1
	.byte	$00
	.byte	$0F
	.byte	$1E
	.byte	$18
	.byte	$1D
	.byte	$08
	.byte	$01
	.addr	_DumpHandler
	.byte	$00
	.word	$0000
_HelpFrame:
	.byte	$B0
	.byte	$AE
	.byte	$AD
	.byte	$BD
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$18
	.byte	$26
	.byte	$17
	.byte	$00
	.addr	_HelpHandler
	.byte	$12
	.addr	_HelpText
_Frames:
	.addr	_AsmFrame
	.addr	_RegFrame
	.addr	_StackFrame
	.addr	_CStackFrame
	.addr	_DumpFrame
	.addr	_HelpFrame
L002E:
	.byte	$C6,$33,$2C,$20,$55,$20,$20,$20,$20,$20,$D2,$55,$4E,$20,$55,$4E
	.byte	$54,$49,$4C,$20,$53,$55,$42,$52,$4F,$55,$54,$49,$4E,$45,$20,$52
	.byte	$45,$54,$55,$52,$4E,$53,$00
L0216:
	.byte	$C3,$41,$4E,$4E,$4F,$54,$20,$53,$45,$54,$20,$42,$52,$45,$41,$4B
	.byte	$50,$4F,$49,$4E,$54,$20,$2D,$20,$50,$52,$45,$53,$53,$20,$41,$20
	.byte	$4B,$45,$59,$00
L022A:
	.byte	$D4,$4F,$4F,$20,$4D,$41,$4E,$59,$20,$42,$52,$45,$41,$4B,$50,$4F
	.byte	$49,$4E,$54,$53,$20,$2D,$20,$50,$52,$45,$53,$53,$20,$41,$20,$4B
	.byte	$45,$59,$00
L006A:
	.byte	$53,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D3,$4B,$49,$50,$20,$4E
	.byte	$45,$58,$54,$20,$49,$4E,$53,$54,$52,$55,$43,$54,$49,$4F,$4E,$00
L003E:
	.byte	$31,$2D,$35,$20,$20,$20,$20,$20,$20,$20,$D3,$45,$4C,$45,$43,$54
	.byte	$20,$41,$43,$54,$49,$56,$45,$20,$57,$49,$4E,$44,$4F,$57,$00
L005E:
	.byte	$50,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D5,$53,$45,$20,$41,$53
	.byte	$20,$4E,$45,$57,$20,$D0,$C3,$20,$56,$41,$4C,$55,$45,$00
L0056:
	.byte	$46,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C6,$4F,$4C,$4C,$4F,$57
	.byte	$20,$49,$4E,$53,$54,$52,$55,$43,$54,$49,$4F,$4E,$00
L002A:
	.byte	$C6,$32,$2C,$20,$54,$20,$20,$20,$20,$20,$D4,$4F,$47,$47,$4C,$45
	.byte	$20,$42,$52,$45,$41,$4B,$50,$4F,$49,$4E,$54,$00
L0211:
	.byte	$C9,$4E,$56,$41,$4C,$49,$44,$20,$49,$4E,$50,$55,$54,$20,$2D,$20
	.byte	$50,$52,$45,$53,$53,$20,$41,$20,$4B,$45,$59,$00
L0176:
	.byte	$D0,$52,$45,$53,$53,$20,$41,$4E,$59,$20,$4B,$45,$59,$20,$54,$4F
	.byte	$20,$43,$4F,$4E,$54,$49,$4E,$55,$45,$00
L0032:
	.byte	$C6,$34,$2C,$20,$48,$20,$20,$20,$20,$20,$D2,$55,$4E,$20,$54,$4F
	.byte	$20,$43,$55,$52,$53,$4F,$52,$00
L0066:
	.byte	$52,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D2,$45,$44,$52,$41,$57
	.byte	$20,$53,$43,$52,$45,$45,$4E,$00
L004E:
	.byte	$41,$2F,$5A,$20,$20,$20,$20,$20,$20,$20,$CD,$4F,$56,$45,$20,$55
	.byte	$50,$2F,$44,$4F,$57,$4E,$00
L004A:
	.byte	$C3,$55,$52,$53,$4F,$52,$20,$20,$20,$20,$CD,$4F,$56,$45,$20,$55
	.byte	$50,$2F,$44,$4F,$57,$4E,$00
L005A:
	.byte	$4F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C7,$4F,$54,$4F,$20,$4F
	.byte	$52,$49,$47,$49,$4E,$00
L0036:
	.byte	$C6,$37,$2C,$20,$53,$50,$41,$43,$45,$20,$D3,$54,$45,$50,$20,$49
	.byte	$4E,$54,$4F,$00
L003A:
	.byte	$C6,$38,$2C,$20,$45,$4E,$54,$45,$52,$20,$D3,$54,$45,$50,$20,$4F
	.byte	$56,$45,$52,$00
L0042:
	.byte	$2B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D0,$41,$47,$45,$20,$44
	.byte	$4F,$57,$4E,$00
L0052:
	.byte	$43,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C3,$4F,$4E,$54,$49,$4E
	.byte	$55,$45,$00
L0046:
	.byte	$2D,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D0,$41,$47,$45,$20,$55
	.byte	$50,$00
L0172:
	.byte	$D0,$52,$45,$53,$53,$20,$C6,$31,$20,$46,$4F,$52,$20,$48,$45,$4C
	.byte	$50,$00
L0062:
	.byte	$51,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D1,$55,$49,$54,$00
L0026:
	.byte	$C6,$31,$2C,$20,$3F,$20,$20,$20,$20,$20,$C8,$45,$4C,$50,$00
L020B:
	.byte	$C7,$4F,$54,$4F,$3A,$20,$00
L000A:
	.byte	$D3,$D2,$00
L001E:
	.byte	$C3,$D3,$00
L0022:
	.byte	$C8,$C9,$00
L001A:
	.byte	$D3,$D0,$00
L03AC:
	.byte	$2D,$3E,$00
L0006:
	.byte	$D0,$C3,$00
L0012:
	.byte	$D8,$00
L000E:
	.byte	$C1,$00
L0016:
	.byte	$D9,$00

.segment	"BSS"

_AsmAddr:
	.res	2,$00
_DumpAddr:
	.res	2,$00
_CStackAddr:
	.res	2,$00
_StackAddr:
	.res	1,$00
_PromptColor:
	.res	1,$00
_PromptLength:
	.res	1,$00
_DbgBreaks:
	.res	48,$00

; ---------------------------------------------------------------
; unsigned char __near__ AsmHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHandler: near

.segment	"CODE"

	jsr     decsp3
L02EC:	jsr     _UpdateAsm
	jsr     stax0sp
	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$11
	jeq     L031D
	cmp     #$2B
	beq     L02F7
	cmp     #$2D
	beq     L02FB
	cmp     #$41
	beq     L0315
	cmp     #$46
	beq     L0307
	cmp     #$47
	beq     L030A
	cmp     #$4F
	beq     L030E
	cmp     #$50
	beq     L0311
	cmp     #$54
	beq     L0301
	cmp     #$5A
	beq     L031D
	cmp     #$89
	beq     L0301
	cmp     #$91
	beq     L0315
	jmp     L0508
L02F7:	jsr     ldax0sp
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L02EC
L02FB:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     _AsmFrame+9
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L02EC
L0301:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgToggleUserBreak
	jmp     L02EC
L0307:	jsr     _AsmFollow
	jmp     L02EC
L030A:	lda     #<(_AsmAddr)
	ldx     #>(_AsmAddr)
	jsr     _InputGoto
	jmp     L02EC
L030E:	jsr     _AsmHome
	jmp     L02EC
L0311:	lda     _AsmAddr+1
	sta     _brk_pc+1
	lda     _AsmAddr
	sta     _brk_pc
	jmp     L02EC
L0315:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     #$01
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L02EC
L031D:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgDisAsmLen
	clc
	adc     _AsmAddr
	sta     _AsmAddr
	txa
	adc     _AsmAddr+1
	sta     _AsmAddr+1
	jmp     L02EC
L0508:	ldx     #$00
	lda     (sp),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ RegHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RegHandler: near

.segment	"CODE"

	jmp     _GetKeyUpdate

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ StackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _StackFrame+9
	jsr     pusha
L0377:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$11
	beq     L0390
	cmp     #$2B
	beq     L0380
	cmp     #$2D
	beq     L0384
	cmp     #$41
	beq     L038B
	cmp     #$4F
	beq     L0388
	cmp     #$5A
	beq     L0390
	cmp     #$91
	beq     L038B
	jmp     L0509
L0380:	dey
	lda     (sp),y
	clc
	adc     _StackAddr
	sta     _StackAddr
	jmp     L037E
L0384:	dey
	lda     (sp),y
	eor     #$FF
	sec
	adc     _StackAddr
	sta     _StackAddr
	jmp     L037E
L0388:	jsr     _StackHome
	jmp     L037E
L038B:	dec     _StackAddr
	jmp     L037E
L0390:	inc     _StackAddr
	jmp     L037E
L0509:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L037E:	jsr     _UpdateStack
	jmp     L0377

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ CStackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _CStackFrame+9
	asl     a
	jsr     pusha
L03B7:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$11
	beq     L03D2
	cmp     #$2B
	beq     L03C0
	cmp     #$2D
	beq     L03C4
	cmp     #$41
	beq     L03CB
	cmp     #$4F
	beq     L03C8
	cmp     #$5A
	beq     L03D2
	cmp     #$91
	beq     L03CB
	jmp     L050A
L03C0:	dey
	lda     (sp),y
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	tya
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	jmp     L03BE
L03C4:	dey
	lda     (sp),y
	eor     #$FF
	sec
	adc     _CStackAddr
	sta     _CStackAddr
	lda     #$FF
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	jmp     L03BE
L03C8:	jsr     _CStackHome
	jmp     L03BE
L03CB:	lda     _CStackAddr
	sec
	sbc     #$02
	sta     _CStackAddr
	bcs     L03BE
	dec     _CStackAddr+1
	jmp     L03BE
L03D2:	lda     #$02
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	bcc     L03BE
	inc     _CStackAddr+1
	jmp     L03BE
L050A:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L03BE:	jsr     _UpdateCStack
	jmp     L03B7

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DumpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHandler: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     _DumpFrame+9
	jsr     shlax3
	jsr     pushax
L03F7:	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$11
	beq     L0416
	cmp     #$2B
	beq     L0400
	cmp     #$2D
	beq     L0404
	cmp     #$41
	beq     L040F
	cmp     #$47
	beq     L0408
	cmp     #$4F
	beq     L040C
	cmp     #$5A
	beq     L0416
	cmp     #$91
	beq     L040F
	jmp     L050B
L0400:	jsr     ldax0sp
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	jmp     L03FE
L0404:	jsr     ldax0sp
	eor     #$FF
	sec
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	eor     #$FF
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	jmp     L03FE
L0408:	lda     #<(_DumpAddr)
	ldx     #>(_DumpAddr)
	jsr     _InputGoto
	jmp     L03FE
L040C:	jsr     _DumpHome
	jmp     L03FE
L040F:	lda     _DumpAddr
	sec
	sbc     #$08
	sta     _DumpAddr
	bcs     L03FE
	dec     _DumpAddr+1
	jmp     L03FE
L0416:	lda     #$08
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	bcc     L03FE
	inc     _DumpAddr+1
	jmp     L03FE
L050B:	ldx     #$00
	lda     (sp),y
	jmp     incsp3
L03FE:	jsr     _UpdateDump
	jmp     L03F7

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ HelpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpHandler: near

.segment	"CODE"

	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     pushax
	lda     #$05
	jsr     pusha0
	lda     #$01
	jsr     _ActivateFrame
	jsr     _AnyKeyPrompt
	jsr     _cgetc
	ldy     #$00
	lda     (sp),y
	jsr     _Redraw
	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ DisplayPrompt (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DisplayPrompt: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	lda     #$00
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     _ActivePrompt
	ora     _ActivePrompt+1
	beq     L0156
	lda     _PromptColor
	jsr     _textcolor
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     _PromptLength
	jsr     _chlinexy
L0156:	ldy     #$02
	jsr     ldaxysp
	sta     _ActivePrompt
	stx     _ActivePrompt+1
	ldy     #$00
	lda     (sp),y
	sta     _PromptColor
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _strlen
	sta     _PromptLength
	lda     #$00
	jsr     _textcolor
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _cputsxy
	lda     _PromptColor
	jsr     _textcolor
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ SingleStep (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SingleStep: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     _brk_pc+1
	sta     ptr1+1
	lda     _brk_pc
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$10
	beq     L044E
	cmp     #$20
	beq     L0461
	cmp     #$30
	beq     L044E
	cmp     #$40
	beq     L045C
	cmp     #$4C
	beq     L0438
	cmp     #$50
	beq     L044E
	cmp     #$60
	beq     L0459
	cmp     #$6C
	beq     L043C
	cmp     #$70
	beq     L044E
	cmp     #$90
	beq     L044E
	cmp     #$B0
	beq     L044E
	cmp     #$D0
	beq     L044E
	cmp     #$F0
	beq     L044E
	jmp     L0436
L0438:	jsr     _GetArg16
	jmp     L050C
L043C:	jsr     _GetArg16
	jsr     ldaxi
	jmp     L050C
L044E:	lda     _brk_pc
	ldx     _brk_pc+1
	iny
	jsr     ldaidx
	dey
	sta     (sp),y
	lda     (sp),y
	beq     L0436
	ldx     #$00
	lda     (sp),y
	bpl     L0457
	dex
L0457:	clc
	adc     _brk_pc
	pha
	txa
	adc     _brk_pc+1
	tax
	pla
	jsr     incax2
	jsr     _DbgSetTmpBreak
	jmp     L0436
L0459:	jsr     _SetRTSBreak
	jmp     incsp2
L045C:	lda     #$01
	jsr     _GetStack16
	jmp     L050C
L0461:	iny
	lda     (sp),y
	beq     L0436
	jsr     _GetArg16
	jmp     L050C
L0436:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     pushax
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	jsr     tosaddax
L050C:	jsr     _DbgSetTmpBreak
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ RedrawStatic (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RedrawStatic: near

.segment	"CODE"

	jsr     pusha
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	lda     #$6E
	jsr     _bordercolor
	lda     #$71
	jsr     _bgcolor
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$31
	jsr     _textcolor
	jsr     _DrawFrames
	jsr     _HelpPrompt
	ldy     #$00
	lda     (sp),y
	jsr     pusha0
	lda     #$00
	jsr     _ActivateFrame
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Redraw (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Redraw: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	jsr     _RedrawStatic
	jsr     _UpdateAsm
	jsr     _UpdateReg
	jsr     _UpdateStack
	jsr     _UpdateCStack
	jsr     _UpdateDump
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetKeyUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetKeyUpdate: near

.segment	"BSS"

L0486:
	.res	1,$00

.segment	"CODE"

	jmp     L0489
L050D:	lda     L0486
	beq     L048F
	cmp     #$01
	beq     L0492
	cmp     #$02
	beq     L0495
	cmp     #$03
	beq     L0498
	jmp     L050E
L048F:	jsr     _UpdateAsm
	jmp     L050E
L0492:	jsr     _UpdateStack
	jmp     L050E
L0495:	jsr     _UpdateCStack
	jmp     L050E
L0498:	jsr     _UpdateDump
L050E:	lda     L0486
	clc
	adc     #$01
	and     #$03
	sta     L0486
L0489:	jsr     _kbhit
	tax
	beq     L050D
	jmp     _cgetc

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrame (register __near__ const struct $anon-struct-0008 *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrame: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	ldx     #$04
	jsr     regswap2
	ldy     #$0B
	jsr     subysp
	ldy     #$0B
	lda     (sp),y
	beq     L00D1
	lda     #$00
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     #$B0
	ldy     #$07
	sta     (sp),y
	lda     #$AE
	dey
	sta     (sp),y
	lda     #$AD
	dey
	sta     (sp),y
	lda     #$BD
	jmp     L0510
L00D1:	lda     #$31
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     (regbank+4),y
	ldy     #$07
	sta     (sp),y
	ldy     #$01
	lda     (regbank+4),y
	ldy     #$06
	sta     (sp),y
	ldy     #$02
	lda     (regbank+4),y
	ldy     #$05
	sta     (sp),y
	ldy     #$03
	lda     (regbank+4),y
L0510:	ldy     #$04
	sta     (sp),y
	lda     (regbank+4),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (regbank+4),y
	ldy     #$02
	sta     (sp),y
	ldy     #$08
	lda     (regbank+4),y
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$06
	lda     (sp),y
	jsr     _cputc
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	ldy     #$05
	lda     (sp),y
	jsr     _cputc
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$04
	lda     (sp),y
	jsr     _cputc
	ldy     #$06
	lda     (regbank+4),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	lda     #$11
	jsr     _textcolor
	ldy     #$0D
	lda     (regbank+4),y
	ldy     #$08
	sta     (sp),y
	ldy     #$0F
	lda     (regbank+4),y
	tax
	dey
	lda     (regbank+4),y
	ldy     #$09
	jsr     staxysp
	jmp     L0111
L010F:	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$0C
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     tosadda0
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$0D
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     tosadda0
	jsr     pusha
	ldy     #$0C
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     _cputsxy
	ldy     #$09
	ldx     #$00
	lda     #$04
	jsr     addeqysp
L0111:	ldy     #$08
	lda     (sp),y
	pha
	sec
	sbc     #$01
	sta     (sp),y
	pla
	tax
	bne     L010F
	lda     (sp,x)
	jsr     _textcolor
	ldy     #$0C
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	iny
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrames (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrames: near

.segment	"CODE"

	jsr     decsp3
	lda     #$00
	ldy     #$02
L0512:	sta     (sp),y
	cmp     #$06
	bcs     L011C
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0513
	inx
	clc
L0513:	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0A
	lda     (ptr1),y
	beq     L011D
	jsr     pushw0sp
	lda     #$00
	jsr     _DrawFrame
L011D:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0512
L011C:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ ActivateFrame (int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ActivateFrame: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	cpx     _ActiveFrame+1
	bne     L0516
	cmp     _ActiveFrame
	jeq     L012F
L0516:	ldx     _ActiveFrame+1
	bmi     L0131
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     pushw
	lda     #$00
	jsr     _DrawFrame
L0131:	ldy     #$05
	jsr     ldaxysp
	sta     _ActiveFrame
	stx     _ActiveFrame+1
	txa
	bmi     L0137
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	sta     regbank+4
	stx     regbank+4+1
	ldy     #$03
	lda     (sp),y
	beq     L0141
	ldy     #$05
	lda     (regbank+4),y
	clc
	adc     #$01
	ldy     #$02
L0515:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$07
	lda     (regbank+4),y
	jsr     tosicmp0
	bcs     L0141
	ldy     #$04
	lda     (regbank+4),y
	clc
	adc     #$01
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	lda     (regbank+4),y
	jsr     _cclearxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0515
L0141:	lda     regbank+4
	ldx     regbank+4+1
	jsr     pushax
	lda     #$01
	jsr     _DrawFrame
L0137:	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _DisplayPrompt
L012F:	ldy     #$00
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ HelpPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpPrompt: near

.segment	"CODE"

	lda     #<(L0172)
	ldx     #>(L0172)
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ AnyKeyPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AnyKeyPrompt: near

.segment	"CODE"

	lda     #<(L0176)
	ldx     #>(L0176)
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsAbortKey (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsAbortKey: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	cmp     #$1B
	bne     L0518
	lda     #$01
	jmp     incsp1
L0518:	lda     (sp,x)
	cmp     #$03
	bne     L0519
	lda     #$01
	jmp     incsp1
L0519:	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ Input (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Input: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp8
	lda     #$00
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     #$28
	jsr     _cclearxy
	lda     #$00
	jsr     _textcolor
	ldy     #$05
	sta     (sp),y
	lda     #$00
	jsr     pusha
	lda     #$18
	jsr     pusha
	ldy     #$0E
	jsr     ldaxysp
	jsr     _cputsxy
	lda     #$11
	jsr     _textcolor
	jsr     _wherex
	ldy     #$03
	sta     (sp),y
	lda     #$01
	jsr     _cursor
	ldy     #$04
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
L0198:	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	jsr     _isalnum
	stx     tmp1
	ora     tmp1
	beq     L019D
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldy     #$08
	cmp     (sp),y
	bcs     L019D
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L051D
L019D:	ldy     #$02
	lda     (sp),y
	beq     L01AB
	ldy     #$00
	lda     (sp),y
	cmp     #$14
	bne     L0524
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     #$20
	jsr     _cputcxy
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     _gotoxy
	jmp     L01C0
L01AB:	tay
L0524:	lda     (sp),y
	cmp     #$0D
	bne     L0522
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     #$01
	jmp     L0523
L0522:	lda     (sp),y
	jsr     _IsAbortKey
	tax
	beq     L01C0
	lda     #$02
L0523:	ldy     #$01
L051D:	sta     (sp),y
L01C0:	ldy     #$01
	lda     (sp),y
	jeq     L0198
	ldy     #$04
	lda     (sp),y
	jsr     _cursor
	ldy     #$05
	lda     (sp),y
	jsr     _textcolor
	jsr     _DrawFrames
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	ldy     #$06
	jsr     staxysp
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	ldy     #$09
	jsr     pushwysp
	lda     #$00
	jsr     _ActivateFrame
	ldy     #$01
	lda     (sp),y
	cmp     #$01
	jsr     booleq
	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputHex (__near__ unsigned char *, __near__ unsigned int *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputHex: near

.segment	"CODE"

	jsr     pushax
	ldy     #$0A
	jsr     subysp
	ldy     #$0F
	jsr     pushwysp
	lda     #$07
	jsr     leaa0sp
	jsr     pushax
	lda     #$04
	jsr     _Input
	tax
	jeq     L01FF
	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     _isxdigit
	stx     tmp1
	ora     tmp1
	bne     L01D7
	tax
	jmp     L01FF
L01D7:	lda     #$05
	jsr     leaa0sp
	ldy     #$03
	jsr     staxysp
	ldx     #$00
	txa
	jsr     stax0sp
	jmp     L01E6
L01E4:	jsr     ldax0sp
	jsr     shlax4
	jsr     stax0sp
	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _isdigit
	stx     tmp1
	ora     tmp1
	beq     L01EF
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$30
	jmp     L0526
L01EF:	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _toupper
	ldy     #$B7
	jsr     decaxy
	ldy     #$02
L0526:	sta     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L01E6:	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	tax
	beq     L0525
	lda     (sp),y
	ldx     #$00
	jsr     _isxdigit
	stx     tmp1
	ora     tmp1
	bne     L01E4
L0525:	ldy     #$0B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldx     #$00
	tya
L01FF:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ ErrorPrompt (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ErrorPrompt: near

.segment	"CODE"

	jsr     pushax
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _DisplayPrompt
	jsr     _cgetc
	jsr     ldax0sp
	jsr     _DisplayPrompt
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputGoto (__near__ unsigned int *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputGoto: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	lda     #<(L020B)
	ldx     #>(L020B)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     _InputHex
	ldy     #$00
	sta     (sp),y
	lda     (sp),y
	bne     L052C
	lda     #<(L0211)
	ldx     #>(L0211)
	jsr     _ErrorPrompt
L052C:	ldx     #$00
	lda     (sp,x)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ BreakInRomError (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_BreakInRomError: near

.segment	"CODE"

	lda     #<(L0216)
	ldx     #>(L0216)
	jmp     _ErrorPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ DbgSetTmpBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgSetTmpBreak: near

.segment	"CODE"

	jsr     pushax
	jsr     _DbgGetBreakSlot
	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$80
	ldy     #$03
	sta     (ptr1),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgToggleUserBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgToggleUserBreak: near

.segment	"CODE"

	jsr     pushax
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _DbgIsBreak
	sta     regbank+4
	stx     regbank+4+1
	lda     regbank+4
	ora     regbank+4+1
	beq     L0221
	lda     #$00
	ldy     #$03
	sta     (regbank+4),y
	dec     _DbgBreakCount
	jmp     L0231
L0221:	lda     _DbgBreakCount
	cmp     #$0A
	bcc     L0227
	lda     #<(L022A)
	ldx     #>(L022A)
	jsr     _ErrorPrompt
	jmp     L0231
L0227:	ldy     #$03
	jsr     ldaxysp
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L022D
	jsr     _BreakInRomError
	jmp     L0231
L022D:	jsr     _DbgGetBreakSlot
	sta     regbank+4
	stx     regbank+4+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	tya
	ldy     #$03
	sta     (regbank+4),y
	inc     _DbgBreakCount
L0231:	ldy     #$00
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgResetTmpBreaks (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgResetTmpBreaks: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L052E:	sta     (sp),y
	cmp     #$0A
	bcs     L023C
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0243
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$03
	sta     (ptr1),y
L0243:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L052E
L023C:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DbgTmpBreaksOk (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgTmpBreaksOk: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L052F:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	bcs     L0531
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0252
	jsr     ldax0sp
	jsr     ldaxi
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L0252
	jsr     _BreakInRomError
	jsr     _DbgResetTmpBreaks
	ldx     #$00
	txa
	jmp     incsp3
L0252:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L052F
L0531:	lda     #$01
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmBack (unsigned int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmBack: near

.segment	"CODE"

	jsr     pusha
	ldy     #$43
	jsr     subysp
	lda     #$06
	jsr     pusha0
L025F:	lda     #$00
	ldy     #$02
	sta     (sp),y
	ldy     #$49
	jsr     pushwysp
	ldy     #$47
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tossubax
	sec
	ldy     #$00
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	ldy     #$43
	jsr     staxysp
L0268:	ldy     #$44
	jsr     ldaxysp
	jsr     _DbgDisAsmLen
	ldy     #$43
	jsr     addeqysp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0535
	inx
	clc
L0535:	adc     #$03
	bcc     L0271
	inx
	clc
L0271:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$44
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	and     #$1F
	sta     (sp),y
	ldy     #$44
	jsr     ldaxysp
	ldy     #$46
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcc     L0268
	ldy     #$44
	jsr     ldaxysp
	ldy     #$46
	cmp     (sp),y
	bne     L0537
	txa
	iny
	cmp     (sp),y
	beq     L0279
L0537:	ldy     #$01
	lda     (sp),y
	bne     L0539
	dey
	lda     (sp),y
	cmp     #$0C
	bne     L0539
L0279:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	sec
	ldy     #$45
	sbc     (sp),y
	sec
	sbc     #$01
	and     #$1F
	asl     a
	bcc     L0536
	inx
	clc
L0536:	adc     #$03
	bcc     L027F
	inx
	clc
L027F:	adc     sp
	tay
	txa
	adc     sp+1
	tax
	tya
	jsr     ldaxi
	jmp     L0260
L0539:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jmp     L025F
L0260:	ldy     #$48
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateAsm: near

.segment	"CODE"

	ldy     #$2A
	jsr     subysp
	lda     _AsmFrame+8
	jsr     pusha
	lda     _AsmFrame+4
	clc
	adc     #$01
	jsr     pusha
	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     #$02
	jsr     _AsmBack
	jsr     pushax
	lda     _AsmFrame+5
	clc
	adc     #$01
	ldy     #$04
L053C:	sta     (sp),y
	cmp     _AsmFrame+7
	jcs     L028A
	jsr     pushw0sp
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	jsr     _DbgDisAsm
	ldy     #$05
	sta     (sp),y
	jsr     ldax0sp
	cpx     _brk_pc+1
	bne     L0296
	cmp     _brk_pc
	bne     L0296
	lda     #$2D
	ldy     #$0A
	sta     (sp),y
	lda     #$3E
	iny
	sta     (sp),y
L0296:	jsr     ldax0sp
	jsr     _DbgIsBreak
	stx     tmp1
	ora     tmp1
	beq     L029E
	lda     #$2A
	ldy     #$0B
	sta     (sp),y
L029E:	jsr     ldax0sp
	cpx     _AsmAddr+1
	bne     L02A4
	cmp     _AsmAddr
	bne     L02A4
	lda     #$01
	jsr     _revers
	lda     #$01
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$08
	jsr     leaa0sp
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	jmp     L02AE
L02A4:	lda     #$01
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$08
	jsr     leaa0sp
	jsr     _cputsxy
L02AE:	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L053C
L028A:	jsr     ldax0sp
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmArg16: near

.segment	"CODE"

	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     incax1
	ldy     #$01
	jmp     ldaxidx

.endproc

; ---------------------------------------------------------------
; void __near__ AsmFollow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmFollow: near

.segment	"CODE"

	lda     _AsmAddr+1
	sta     ptr1+1
	lda     _AsmAddr
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$10
	beq     L02C8
	cmp     #$20
	beq     L02BE
	cmp     #$30
	beq     L02C8
	cmp     #$40
	beq     L0541
	cmp     #$4C
	beq     L02BE
	cmp     #$50
	beq     L02C8
	cmp     #$60
	beq     L0540
	cmp     #$6C
	beq     L02C4
	cmp     #$70
	beq     L02C8
	cmp     #$90
	beq     L02C8
	cmp     #$B0
	beq     L02C8
	cmp     #$D0
	beq     L02C8
	cmp     #$F0
	beq     L02C8
	rts
L02BE:	jsr     _AsmArg16
	jmp     L0542
L02C4:	jsr     _AsmArg16
	jmp     L053E
L02C8:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     incax2
	jsr     pushax
	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     incax1
	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	jmp     L0542
L0540:	ldx     #$01
	txa
	clc
	adc     _DbgSP
	bcc     L053D
	inx
L053D:	jsr     ldaxi
	jsr     incax1
	jmp     L0542
L0541:	ldx     #$01
	lda     #$02
	clc
	adc     _DbgSP
	bcc     L053E
	inx
L053E:	jsr     ldaxi
L0542:	sta     _AsmAddr
	stx     _AsmAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AsmHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHome: near

.segment	"CODE"

	lda     _brk_pc+1
	sta     _AsmAddr+1
	lda     _brk_pc
	sta     _AsmAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitAsm: near

.segment	"CODE"

	jsr     _AsmHome
	jmp     _UpdateAsm

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateReg: near

.segment	"CODE"

	lda     _RegFrame+4
	clc
	adc     #$05
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$02
	jsr     pusha
	lda     _RegFrame+5
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _cputhex16
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_sr
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_a
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_x
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgSP
	jsr     _cputhex8
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgCS
	ldx     _DbgCS+1
	jsr     _cputhex16
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgHI
	ldx     _DbgHI+1
	jsr     _cputhex16
	ldx     #$00
	txa
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ InitReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitReg: near

.segment	"CODE"

	jmp     _UpdateReg

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateStack: near

.segment	"CODE"

	lda     _StackAddr
	jsr     pusha
	lda     _StackFrame+4
	clc
	adc     #$01
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$06
	jsr     pusha
	jsr     decsp1
	lda     _StackFrame+7
	sec
	sbc     #$01
	ldy     #$00
L0546:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	sec
	sbc     _StackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L035B
	bcc     L035B
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldx     #$01
	lda     #$00
	clc
	ldy     #$03
	adc     (sp),y
	bcc     L0544
	inx
L0544:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _cputhex8
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L0546
L035B:	ldy     #$03
	lda     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ StackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHome: near

.segment	"CODE"

	lda     _DbgSP
	clc
	adc     #$01
	sta     _StackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitStack: near

.segment	"CODE"

	jsr     _StackHome
	jmp     _UpdateStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateCStack: near

.segment	"CODE"

	lda     _CStackAddr
	ldx     _CStackAddr+1
	jsr     pushax
	lda     _CStackFrame+4
	clc
	adc     #$05
	jsr     pusha
	jsr     decsp1
	lda     _CStackFrame+7
	sec
	sbc     #$01
	ldy     #$00
L0548:	sta     (sp),y
	sec
	sbc     _CStackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L0549
	bcc     L0549
	iny
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _cputhex16
	ldy     #$02
	ldx     #$00
	tya
	jsr     addeqysp
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L0548
L0549:	lda     _CStackFrame+4
	clc
	adc     #$01
	jsr     pusha
	lda     _CStackFrame+7
	sec
	sbc     #$01
	jsr     pusha
	lda     #<(L03AC)
	ldx     #>(L03AC)
	jsr     _cputsxy
	ldy     #$03
	jsr     ldaxysp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ CStackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHome: near

.segment	"CODE"

	lda     _DbgCS+1
	sta     _CStackAddr+1
	lda     _DbgCS
	sta     _CStackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitCStack: near

.segment	"CODE"

	jsr     _CStackHome
	jmp     _UpdateCStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateDump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateDump: near

.segment	"CODE"

	ldy     #$29
	jsr     subysp
	lda     _DumpAddr
	ldx     _DumpAddr+1
	jsr     pushax
	lda     _DumpFrame+4
	clc
	adc     #$01
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	lda     _DumpFrame+5
	clc
	adc     #$01
	ldy     #$05
L054A:	sta     (sp),y
	cmp     _DumpFrame+7
	bcs     L03E1
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	jsr     pushwysp
	lda     #$0A
	jsr     leaa0sp
	jsr     pushax
	lda     #$08
	jsr     pusha
	jsr     _DbgMemDump
	jsr     _cputsxy
	ldy     #$03
	ldx     #$00
	lda     #$08
	jsr     addeqysp
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	jmp     L054A
L03E1:	dey
	jsr     ldaxysp
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DumpHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHome: near

.segment	"CODE"

	lda     #$00
	sta     _DumpAddr
	sta     _DumpAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetArg16: near

.segment	"CODE"

	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     incax1
	ldy     #$01
	jmp     ldaxidx

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetStack16 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetStack16: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	clc
	adc     _DbgSP
	bcc     L054B
	inx
L054B:	sta     ptr1
	stx     ptr1+1
	ldx     #$01
	txa
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldaxi
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ SetRTSBreak (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetRTSBreak: near

.segment	"CODE"

	lda     #$00
	jsr     _GetStack16
	jsr     incax1
	jmp     _DbgSetTmpBreak

.endproc

; ---------------------------------------------------------------
; void __near__ DbgEntry (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgEntry: near

.segment	"DATA"

L049F:
	.byte	$01

.segment	"CODE"

	jsr     decsp2
	lda     L049F
	beq     L04A1
	lda     #$00
	sta     L049F
	jsr     _RedrawStatic
	jsr     _InitAsm
	jsr     _InitReg
	jsr     _InitStack
	jsr     _InitCStack
	jsr     _UpdateDump
L04A1:	jsr     _AsmHome
	jsr     _UpdateReg
	jsr     _StackHome
	jsr     _CStackHome
	lda     #$00
	tay
	sta     (sp),y
	jmp     L0550
L04B2:	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	ldy     #$0C
	jsr     ldaxidx
	jsr     callax
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	jeq     L054F
	cmp     #$0D
	jeq     L04EA
	cmp     #$20
	jeq     L04E0
	cmp     #$31
	beq     L054E
	cmp     #$32
	beq     L054E
	cmp     #$33
	beq     L054E
	cmp     #$34
	beq     L054E
	cmp     #$35
	beq     L054E
	cmp     #$3F
	beq     L04CA
	cmp     #$43
	jeq     L054F
	cmp     #$48
	beq     L04D6
	cmp     #$51
	jeq     L0504
	cmp     #$52
	jeq     L0500
	cmp     #$53
	jeq     L04FA
	cmp     #$55
	beq     L04CF
	cmp     #$85
	beq     L04CA
	cmp     #$86
	beq     L04CF
	cmp     #$88
	beq     L04E0
	cmp     #$8A
	beq     L04D6
	cmp     #$8C
	beq     L04EA
	jmp     L04BB
L054E:	lda     (sp),y
	ldy     #$31
	jsr     decaxy
	jsr     pushax
	lda     #$00
	jsr     _ActivateFrame
	jmp     L04BB
L04CA:	jsr     _HelpHandler
	jmp     L04BB
L04CF:	jsr     _SetRTSBreak
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0550
L04D6:	lda     _brk_pc
	ldx     _brk_pc+1
	cpx     _AsmAddr+1
	bne     L0551
	cmp     _AsmAddr
	beq     L04BB
L0551:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgSetTmpBreak
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0550
L04E0:	tya
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L04BB
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0550
L04EA:	txa
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L04BB
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0550
L054F:	tya
	dey
	sta     (sp),y
	jmp     L0550
L04FA:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	clc
	adc     _brk_pc
	sta     _brk_pc
	txa
	adc     _brk_pc+1
	sta     _brk_pc+1
	jsr     _InitAsm
	jmp     L04BB
L0500:	lda     _ActiveFrame
	jsr     _Redraw
	jmp     L04BB
L0504:	jsr     _clrscr
	ldx     #$00
	lda     #$01
	jsr     _exit
L04BB:	ldy     #$00
L0550:	lda     (sp),y
	jeq     L04B2
	jmp     incsp2

.endproc

