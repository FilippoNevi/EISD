ca65 V2.17 - Git 582aa41
Main file   : src/main.s
Current file: src/main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git 582aa41
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_mul
000000r 1               	.import		_io_write
000000r 1               	.import		_io_read
000000r 1               	.import		_root
000000r 1               	.export		_main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; int __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  A9 09        	lda     #$09
000002r 1  20 rr rr     	jsr     pusha
000005r 1  A9 00        	lda     #$00
000007r 1  20 rr rr     	jsr     pusha
00000Ar 1  20 rr rr     	jsr     pusha
00000Dr 1  20 rr rr     	jsr     pusha
000010r 1  A9 05        	lda     #$05
000012r 1  20 rr rr     	jsr     pusha0
000015r 1  A9 02        	lda     #$02
000017r 1  20 rr rr     	jsr     pusha0
00001Ar 1  20 rr rr     	jsr     pushl0
00001Dr 1  A0 09        	ldy     #$09
00001Fr 1  20 rr rr     	jsr     pushwysp
000022r 1  A0 07        	ldy     #$07
000024r 1  B1 rr        	lda     (sp),y
000026r 1  AA           	tax
000027r 1  88           	dey
000028r 1  B1 rr        	lda     (sp),y
00002Ar 1  20 rr rr     	jsr     _mul
00002Dr 1  20 rr rr     	jsr     steax0sp
000030r 1  20 rr rr     	jsr     ldeax0sp
000033r 1  20 rr rr     	jsr     _io_write
000036r 1  20 rr rr     	jsr     decsp3
000039r 1  A0 0E        	ldy     #$0E
00003Br 1  B1 rr        	lda     (sp),y
00003Dr 1  A0 02        	ldy     #$02
00003Fr 1  91 rr        	sta     (sp),y
000041r 1  A0 0D        	ldy     #$0D
000043r 1  B1 rr        	lda     (sp),y
000045r 1  A0 01        	ldy     #$01
000047r 1  91 rr        	sta     (sp),y
000049r 1  A0 0C        	ldy     #$0C
00004Br 1  B1 rr        	lda     (sp),y
00004Dr 1  A0 00        	ldy     #$00
00004Fr 1  91 rr        	sta     (sp),y
000051r 1  A0 0B        	ldy     #$0B
000053r 1  B1 rr        	lda     (sp),y
000055r 1  20 rr rr     	jsr     _root
000058r 1  20 rr rr     	jsr     steax0sp
00005Br 1  20 rr rr     	jsr     ldeax0sp
00005Er 1  20 rr rr     	jsr     _io_write
000061r 1  20 rr rr     	jsr     _io_read
000064r 1  A0 0B        	ldy     #$0B
000066r 1  91 rr        	sta     (sp),y
000068r 1  20 rr rr     	jsr     decsp3
00006Br 1  A0 0E        	ldy     #$0E
00006Dr 1  B1 rr        	lda     (sp),y
00006Fr 1  A0 02        	ldy     #$02
000071r 1  91 rr        	sta     (sp),y
000073r 1  A0 0D        	ldy     #$0D
000075r 1  B1 rr        	lda     (sp),y
000077r 1  A0 01        	ldy     #$01
000079r 1  91 rr        	sta     (sp),y
00007Br 1  A0 0C        	ldy     #$0C
00007Dr 1  B1 rr        	lda     (sp),y
00007Fr 1  A0 00        	ldy     #$00
000081r 1  91 rr        	sta     (sp),y
000083r 1  A0 0B        	ldy     #$0B
000085r 1  B1 rr        	lda     (sp),y
000087r 1  20 rr rr     	jsr     _root
00008Ar 1  20 rr rr     	jsr     steax0sp
00008Dr 1  20 rr rr     	jsr     ldeax0sp
000090r 1  20 rr rr     	jsr     _io_write
000093r 1  A2 00        	ldx     #$00
000095r 1  8A           	txa
000096r 1  A0 0C        	ldy     #$0C
000098r 1  4C rr rr     	jmp     addysp
00009Br 1               
00009Br 1               .endproc
00009Br 1               
00009Br 1               
