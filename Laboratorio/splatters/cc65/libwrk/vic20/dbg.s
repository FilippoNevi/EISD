;
; File generated by cc65 v 2.17 - Git 582aa41
;
	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_exit
	.import		_strlen
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_wherex
	.import		_cputc
	.import		_cputcxy
	.import		_cputsxy
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_chline
	.import		_chlinexy
	.import		_cvlinexy
	.import		_cclearxy
	.import		_cputhex8
	.import		_cputhex16
	.import		_isalnum
	.import		_isdigit
	.import		_isxdigit
	.import		_toupper
	.import		_brk_a
	.import		_brk_x
	.import		_brk_y
	.import		_brk_sr
	.import		_brk_pc
	.import		_DbgDisAsm
	.import		_DbgDisAsmLen
	.import		_DbgIsRAM
	.import		_DbgMemDump
	.import		_DbgSP
	.import		_DbgCS
	.import		_DbgHI
	.export		_DbgBreakCount
	.export		_DbgBreaks
	.import		_DbgGetBreakSlot
	.import		_DbgIsBreak
	.export		_DbgEntry

.segment	"DATA"

_ActiveFrame:
	.word	$FFFF
_ActivePrompt:
	.word	$0000
_DbgBreakCount:
	.byte	$00

.segment	"RODATA"

_RegText:
	.byte	$01
	.byte	$00
	.addr	L0005
	.byte	$01
	.byte	$01
	.addr	L0009
	.byte	$01
	.byte	$02
	.addr	L000D
	.byte	$01
	.byte	$03
	.addr	L0011
	.byte	$01
	.byte	$04
	.addr	L0015
	.byte	$01
	.byte	$05
	.addr	L0019
	.byte	$01
	.byte	$06
	.addr	L001D
	.byte	$01
	.byte	$07
	.addr	L0021
_HelpText:
	.byte	$01
	.byte	$00
	.addr	L0025
	.byte	$01
	.byte	$01
	.addr	L0029
	.byte	$01
	.byte	$02
	.addr	L002D
	.byte	$01
	.byte	$03
	.addr	L0031
	.byte	$01
	.byte	$04
	.addr	L0035
	.byte	$01
	.byte	$05
	.addr	L0039
	.byte	$01
	.byte	$06
	.addr	L003D
	.byte	$01
	.byte	$07
	.addr	L0041
	.byte	$01
	.byte	$08
	.addr	L0045
	.byte	$01
	.byte	$09
	.addr	L0049
	.byte	$01
	.byte	$0A
	.addr	L004D
	.byte	$01
	.byte	$0B
	.addr	L0051
	.byte	$01
	.byte	$0C
	.addr	L0055
	.byte	$01
	.byte	$0D
	.addr	L0059
	.byte	$01
	.byte	$0E
	.addr	L005D
	.byte	$01
	.byte	$0F
	.addr	L0061
	.byte	$01
	.byte	$10
	.addr	L0065
	.byte	$01
	.byte	$11
	.addr	L0069
_AsmFrame:
	.byte	$B0
	.byte	$B2
	.byte	$AB
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$0F
	.byte	$1D
	.byte	$0E
	.byte	$01
	.addr	_AsmHandler
	.byte	$00
	.word	$0000
_RegFrame:
	.byte	$B2
	.byte	$AE
	.byte	$AB
	.byte	$B3
	.byte	$1E
	.byte	$00
	.byte	$27
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_RegHandler
	.byte	$08
	.addr	_RegText
_StackFrame:
	.byte	$AB
	.byte	$B3
	.byte	$DB
	.byte	$B3
	.byte	$1E
	.byte	$09
	.byte	$27
	.byte	$0F
	.byte	$08
	.byte	$05
	.byte	$01
	.addr	_StackHandler
	.byte	$00
	.word	$0000
_CStackFrame:
	.byte	$DB
	.byte	$B3
	.byte	$B1
	.byte	$BD
	.byte	$1E
	.byte	$0F
	.byte	$27
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_CStackHandler
	.byte	$00
	.word	$0000
_DumpFrame:
	.byte	$AB
	.byte	$DB
	.byte	$AD
	.byte	$B1
	.byte	$00
	.byte	$0F
	.byte	$1E
	.byte	$18
	.byte	$1D
	.byte	$08
	.byte	$01
	.addr	_DumpHandler
	.byte	$00
	.word	$0000
_HelpFrame:
	.byte	$B0
	.byte	$AE
	.byte	$AD
	.byte	$BD
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$18
	.byte	$26
	.byte	$17
	.byte	$00
	.addr	_HelpHandler
	.byte	$12
	.addr	_HelpText
_Frames:
	.addr	_AsmFrame
	.addr	_RegFrame
	.addr	_StackFrame
	.addr	_CStackFrame
	.addr	_DumpFrame
	.addr	_HelpFrame
L002D:
	.byte	$C6,$33,$2C,$20,$55,$20,$20,$20,$20,$20,$D2,$55,$4E,$20,$55,$4E
	.byte	$54,$49,$4C,$20,$53,$55,$42,$52,$4F,$55,$54,$49,$4E,$45,$20,$52
	.byte	$45,$54,$55,$52,$4E,$53,$00
L020E:
	.byte	$C3,$41,$4E,$4E,$4F,$54,$20,$53,$45,$54,$20,$42,$52,$45,$41,$4B
	.byte	$50,$4F,$49,$4E,$54,$20,$2D,$20,$50,$52,$45,$53,$53,$20,$41,$20
	.byte	$4B,$45,$59,$00
L0222:
	.byte	$D4,$4F,$4F,$20,$4D,$41,$4E,$59,$20,$42,$52,$45,$41,$4B,$50,$4F
	.byte	$49,$4E,$54,$53,$20,$2D,$20,$50,$52,$45,$53,$53,$20,$41,$20,$4B
	.byte	$45,$59,$00
L0069:
	.byte	$53,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D3,$4B,$49,$50,$20,$4E
	.byte	$45,$58,$54,$20,$49,$4E,$53,$54,$52,$55,$43,$54,$49,$4F,$4E,$00
L003D:
	.byte	$31,$2D,$35,$20,$20,$20,$20,$20,$20,$20,$D3,$45,$4C,$45,$43,$54
	.byte	$20,$41,$43,$54,$49,$56,$45,$20,$57,$49,$4E,$44,$4F,$57,$00
L005D:
	.byte	$50,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D5,$53,$45,$20,$41,$53
	.byte	$20,$4E,$45,$57,$20,$D0,$C3,$20,$56,$41,$4C,$55,$45,$00
L0055:
	.byte	$46,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C6,$4F,$4C,$4C,$4F,$57
	.byte	$20,$49,$4E,$53,$54,$52,$55,$43,$54,$49,$4F,$4E,$00
L0029:
	.byte	$C6,$32,$2C,$20,$54,$20,$20,$20,$20,$20,$D4,$4F,$47,$47,$4C,$45
	.byte	$20,$42,$52,$45,$41,$4B,$50,$4F,$49,$4E,$54,$00
L0209:
	.byte	$C9,$4E,$56,$41,$4C,$49,$44,$20,$49,$4E,$50,$55,$54,$20,$2D,$20
	.byte	$50,$52,$45,$53,$53,$20,$41,$20,$4B,$45,$59,$00
L0170:
	.byte	$D0,$52,$45,$53,$53,$20,$41,$4E,$59,$20,$4B,$45,$59,$20,$54,$4F
	.byte	$20,$43,$4F,$4E,$54,$49,$4E,$55,$45,$00
L0031:
	.byte	$C6,$34,$2C,$20,$48,$20,$20,$20,$20,$20,$D2,$55,$4E,$20,$54,$4F
	.byte	$20,$43,$55,$52,$53,$4F,$52,$00
L0065:
	.byte	$52,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D2,$45,$44,$52,$41,$57
	.byte	$20,$53,$43,$52,$45,$45,$4E,$00
L004D:
	.byte	$41,$2F,$5A,$20,$20,$20,$20,$20,$20,$20,$CD,$4F,$56,$45,$20,$55
	.byte	$50,$2F,$44,$4F,$57,$4E,$00
L0049:
	.byte	$C3,$55,$52,$53,$4F,$52,$20,$20,$20,$20,$CD,$4F,$56,$45,$20,$55
	.byte	$50,$2F,$44,$4F,$57,$4E,$00
L0059:
	.byte	$4F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C7,$4F,$54,$4F,$20,$4F
	.byte	$52,$49,$47,$49,$4E,$00
L0035:
	.byte	$C6,$37,$2C,$20,$53,$50,$41,$43,$45,$20,$D3,$54,$45,$50,$20,$49
	.byte	$4E,$54,$4F,$00
L0039:
	.byte	$C6,$38,$2C,$20,$45,$4E,$54,$45,$52,$20,$D3,$54,$45,$50,$20,$4F
	.byte	$56,$45,$52,$00
L0041:
	.byte	$2B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D0,$41,$47,$45,$20,$44
	.byte	$4F,$57,$4E,$00
L0051:
	.byte	$43,$20,$20,$20,$20,$20,$20,$20,$20,$20,$C3,$4F,$4E,$54,$49,$4E
	.byte	$55,$45,$00
L0045:
	.byte	$2D,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D0,$41,$47,$45,$20,$55
	.byte	$50,$00
L016C:
	.byte	$D0,$52,$45,$53,$53,$20,$C6,$31,$20,$46,$4F,$52,$20,$48,$45,$4C
	.byte	$50,$00
L0061:
	.byte	$51,$20,$20,$20,$20,$20,$20,$20,$20,$20,$D1,$55,$49,$54,$00
L0025:
	.byte	$C6,$31,$2C,$20,$3F,$20,$20,$20,$20,$20,$C8,$45,$4C,$50,$00
L0203:
	.byte	$C7,$4F,$54,$4F,$3A,$20,$00
L0009:
	.byte	$D3,$D2,$00
L001D:
	.byte	$C3,$D3,$00
L0021:
	.byte	$C8,$C9,$00
L0019:
	.byte	$D3,$D0,$00
L03A4:
	.byte	$2D,$3E,$00
L0005:
	.byte	$D0,$C3,$00
L0011:
	.byte	$D8,$00
L000D:
	.byte	$C1,$00
L0015:
	.byte	$D9,$00

.segment	"BSS"

_AsmAddr:
	.res	2,$00
_DumpAddr:
	.res	2,$00
_CStackAddr:
	.res	2,$00
_StackAddr:
	.res	1,$00
_PromptColor:
	.res	1,$00
_PromptLength:
	.res	1,$00
_DbgBreaks:
	.res	48,$00

; ---------------------------------------------------------------
; unsigned char __near__ AsmHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHandler: near

.segment	"CODE"

	jsr     decsp3
L02E4:	jsr     _UpdateAsm
	jsr     stax0sp
	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$11
	jeq     L0315
	cmp     #$2B
	beq     L02EF
	cmp     #$2D
	beq     L02F3
	cmp     #$41
	beq     L030D
	cmp     #$46
	beq     L02FF
	cmp     #$47
	beq     L0302
	cmp     #$4F
	beq     L0306
	cmp     #$50
	beq     L0309
	cmp     #$54
	beq     L02F9
	cmp     #$5A
	beq     L0315
	cmp     #$89
	beq     L02F9
	cmp     #$91
	beq     L030D
	jmp     L04FD
L02EF:	jsr     ldax0sp
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L02E4
L02F3:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     _AsmFrame+9
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L02E4
L02F9:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgToggleUserBreak
	jmp     L02E4
L02FF:	jsr     _AsmFollow
	jmp     L02E4
L0302:	lda     #<(_AsmAddr)
	ldx     #>(_AsmAddr)
	jsr     _InputGoto
	jmp     L02E4
L0306:	jsr     _AsmHome
	jmp     L02E4
L0309:	lda     _AsmAddr+1
	sta     _brk_pc+1
	lda     _AsmAddr
	sta     _brk_pc
	jmp     L02E4
L030D:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     #$01
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L02E4
L0315:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgDisAsmLen
	clc
	adc     _AsmAddr
	sta     _AsmAddr
	txa
	adc     _AsmAddr+1
	sta     _AsmAddr+1
	jmp     L02E4
L04FD:	ldx     #$00
	lda     (sp),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ RegHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RegHandler: near

.segment	"CODE"

	jmp     _GetKeyUpdate

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ StackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _StackFrame+9
	jsr     pusha
L036F:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$11
	beq     L0388
	cmp     #$2B
	beq     L0378
	cmp     #$2D
	beq     L037C
	cmp     #$41
	beq     L0383
	cmp     #$4F
	beq     L0380
	cmp     #$5A
	beq     L0388
	cmp     #$91
	beq     L0383
	jmp     L04FE
L0378:	dey
	lda     (sp),y
	clc
	adc     _StackAddr
	sta     _StackAddr
	jmp     L0376
L037C:	dey
	lda     (sp),y
	eor     #$FF
	sec
	adc     _StackAddr
	sta     _StackAddr
	jmp     L0376
L0380:	jsr     _StackHome
	jmp     L0376
L0383:	dec     _StackAddr
	jmp     L0376
L0388:	inc     _StackAddr
	jmp     L0376
L04FE:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L0376:	jsr     _UpdateStack
	jmp     L036F

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ CStackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _CStackFrame+9
	asl     a
	jsr     pusha
L03AF:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$11
	beq     L03CA
	cmp     #$2B
	beq     L03B8
	cmp     #$2D
	beq     L03BC
	cmp     #$41
	beq     L03C3
	cmp     #$4F
	beq     L03C0
	cmp     #$5A
	beq     L03CA
	cmp     #$91
	beq     L03C3
	jmp     L04FF
L03B8:	dey
	lda     (sp),y
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	tya
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	jmp     L03B6
L03BC:	dey
	lda     (sp),y
	eor     #$FF
	sec
	adc     _CStackAddr
	sta     _CStackAddr
	lda     #$FF
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	jmp     L03B6
L03C0:	jsr     _CStackHome
	jmp     L03B6
L03C3:	lda     _CStackAddr
	sec
	sbc     #$02
	sta     _CStackAddr
	bcs     L03B6
	dec     _CStackAddr+1
	jmp     L03B6
L03CA:	lda     #$02
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	bcc     L03B6
	inc     _CStackAddr+1
	jmp     L03B6
L04FF:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L03B6:	jsr     _UpdateCStack
	jmp     L03AF

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DumpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHandler: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     _DumpFrame+9
	jsr     shlax3
	jsr     pushax
L03EF:	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$11
	beq     L040E
	cmp     #$2B
	beq     L03F8
	cmp     #$2D
	beq     L03FC
	cmp     #$41
	beq     L0407
	cmp     #$47
	beq     L0400
	cmp     #$4F
	beq     L0404
	cmp     #$5A
	beq     L040E
	cmp     #$91
	beq     L0407
	jmp     L0500
L03F8:	jsr     ldax0sp
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	jmp     L03F6
L03FC:	jsr     ldax0sp
	eor     #$FF
	sec
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	eor     #$FF
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	jmp     L03F6
L0400:	lda     #<(_DumpAddr)
	ldx     #>(_DumpAddr)
	jsr     _InputGoto
	jmp     L03F6
L0404:	jsr     _DumpHome
	jmp     L03F6
L0407:	lda     _DumpAddr
	sec
	sbc     #$08
	sta     _DumpAddr
	bcs     L03F6
	dec     _DumpAddr+1
	jmp     L03F6
L040E:	lda     #$08
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	bcc     L03F6
	inc     _DumpAddr+1
	jmp     L03F6
L0500:	ldx     #$00
	lda     (sp),y
	jmp     incsp3
L03F6:	jsr     _UpdateDump
	jmp     L03EF

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ HelpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpHandler: near

.segment	"CODE"

	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     pushax
	lda     #$05
	jsr     pusha0
	lda     #$01
	jsr     _ActivateFrame
	jsr     _AnyKeyPrompt
	jsr     _cgetc
	ldy     #$00
	lda     (sp),y
	jsr     _Redraw
	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ DisplayPrompt (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DisplayPrompt: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	lda     #$01
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     _ActivePrompt
	ora     _ActivePrompt+1
	beq     L0151
	lda     _PromptColor
	jsr     _textcolor
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     _PromptLength
	jsr     _chlinexy
L0151:	ldy     #$02
	jsr     ldaxysp
	sta     _ActivePrompt
	stx     _ActivePrompt+1
	ldy     #$00
	lda     (sp),y
	sta     _PromptColor
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _strlen
	sta     _PromptLength
	lda     #$01
	jsr     _textcolor
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _cputsxy
	lda     _PromptColor
	jsr     _textcolor
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ SingleStep (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SingleStep: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     _brk_pc+1
	sta     ptr1+1
	lda     _brk_pc
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$10
	beq     L0446
	cmp     #$20
	beq     L0459
	cmp     #$30
	beq     L0446
	cmp     #$40
	beq     L0454
	cmp     #$4C
	beq     L0430
	cmp     #$50
	beq     L0446
	cmp     #$60
	beq     L0451
	cmp     #$6C
	beq     L0434
	cmp     #$70
	beq     L0446
	cmp     #$90
	beq     L0446
	cmp     #$B0
	beq     L0446
	cmp     #$D0
	beq     L0446
	cmp     #$F0
	beq     L0446
	jmp     L042E
L0430:	jsr     _GetArg16
	jmp     L0501
L0434:	jsr     _GetArg16
	jsr     ldaxi
	jmp     L0501
L0446:	lda     _brk_pc
	ldx     _brk_pc+1
	iny
	jsr     ldaidx
	dey
	sta     (sp),y
	lda     (sp),y
	beq     L042E
	ldx     #$00
	lda     (sp),y
	bpl     L044F
	dex
L044F:	clc
	adc     _brk_pc
	pha
	txa
	adc     _brk_pc+1
	tax
	pla
	jsr     incax2
	jsr     _DbgSetTmpBreak
	jmp     L042E
L0451:	jsr     _SetRTSBreak
	jmp     incsp2
L0454:	lda     #$01
	jsr     _GetStack16
	jmp     L0501
L0459:	iny
	lda     (sp),y
	beq     L042E
	jsr     _GetArg16
	jmp     L0501
L042E:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     pushax
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	jsr     tosaddax
L0501:	jsr     _DbgSetTmpBreak
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ RedrawStatic (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RedrawStatic: near

.segment	"CODE"

	jsr     pusha
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	lda     #$00
	jsr     _bordercolor
	lda     #$00
	jsr     _bgcolor
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$0F
	jsr     _textcolor
	jsr     _DrawFrames
	jsr     _HelpPrompt
	ldy     #$00
	lda     (sp),y
	jsr     pusha0
	lda     #$00
	jsr     _ActivateFrame
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Redraw (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Redraw: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	jsr     _RedrawStatic
	jsr     _UpdateAsm
	jsr     _UpdateReg
	jsr     _UpdateStack
	jsr     _UpdateCStack
	jsr     _UpdateDump
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetKeyUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetKeyUpdate: near

.segment	"BSS"

L047B:
	.res	1,$00

.segment	"CODE"

	jmp     L047E
L0502:	lda     L047B
	beq     L0484
	cmp     #$01
	beq     L0487
	cmp     #$02
	beq     L048A
	cmp     #$03
	beq     L048D
	jmp     L0503
L0484:	jsr     _UpdateAsm
	jmp     L0503
L0487:	jsr     _UpdateStack
	jmp     L0503
L048A:	jsr     _UpdateCStack
	jmp     L0503
L048D:	jsr     _UpdateDump
L0503:	lda     L047B
	clc
	adc     #$01
	and     #$03
	sta     L047B
L047E:	jsr     _kbhit
	tax
	beq     L0502
	jmp     _cgetc

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrame (register __near__ const struct $anon-struct-0008 *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrame: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	ldx     #$04
	jsr     regswap2
	ldy     #$0B
	jsr     subysp
	ldy     #$0B
	lda     (sp),y
	beq     L00D0
	lda     #$01
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     #$B0
	ldy     #$07
	sta     (sp),y
	lda     #$AE
	dey
	sta     (sp),y
	lda     #$AD
	dey
	sta     (sp),y
	lda     #$BD
	jmp     L0505
L00D0:	lda     #$0F
	jsr     _textcolor
	ldy     #$00
	sta     (sp),y
	lda     (regbank+4),y
	ldy     #$07
	sta     (sp),y
	ldy     #$01
	lda     (regbank+4),y
	ldy     #$06
	sta     (sp),y
	ldy     #$02
	lda     (regbank+4),y
	ldy     #$05
	sta     (sp),y
	ldy     #$03
	lda     (regbank+4),y
L0505:	ldy     #$04
	sta     (sp),y
	lda     (regbank+4),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (regbank+4),y
	ldy     #$02
	sta     (sp),y
	ldy     #$08
	lda     (regbank+4),y
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$06
	lda     (sp),y
	jsr     _cputc
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	ldy     #$05
	lda     (sp),y
	jsr     _cputc
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$04
	lda     (sp),y
	jsr     _cputc
	ldy     #$06
	lda     (regbank+4),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	lda     #$0F
	jsr     _textcolor
	ldy     #$0D
	lda     (regbank+4),y
	ldy     #$08
	sta     (sp),y
	ldy     #$0F
	lda     (regbank+4),y
	tax
	dey
	lda     (regbank+4),y
	ldy     #$09
	jsr     staxysp
	jmp     L010D
L010B:	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$0C
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     tosadda0
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$0D
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     tosadda0
	jsr     pusha
	ldy     #$0C
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     _cputsxy
	ldy     #$09
	ldx     #$00
	lda     #$04
	jsr     addeqysp
L010D:	ldy     #$08
	lda     (sp),y
	pha
	sec
	sbc     #$01
	sta     (sp),y
	pla
	tax
	bne     L010B
	lda     (sp,x)
	jsr     _textcolor
	ldy     #$0C
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	iny
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrames (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrames: near

.segment	"CODE"

	jsr     decsp3
	lda     #$00
	ldy     #$02
L0507:	sta     (sp),y
	cmp     #$06
	bcs     L0118
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0508
	inx
	clc
L0508:	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0A
	lda     (ptr1),y
	beq     L0119
	jsr     pushw0sp
	lda     #$00
	jsr     _DrawFrame
L0119:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0507
L0118:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ ActivateFrame (int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ActivateFrame: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	cpx     _ActiveFrame+1
	bne     L050B
	cmp     _ActiveFrame
	jeq     L012B
L050B:	ldx     _ActiveFrame+1
	bmi     L012D
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     pushw
	lda     #$00
	jsr     _DrawFrame
L012D:	ldy     #$05
	jsr     ldaxysp
	sta     _ActiveFrame
	stx     _ActiveFrame+1
	txa
	bmi     L0133
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	sta     regbank+4
	stx     regbank+4+1
	ldy     #$03
	lda     (sp),y
	beq     L013D
	ldy     #$05
	lda     (regbank+4),y
	clc
	adc     #$01
	ldy     #$02
L050A:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$07
	lda     (regbank+4),y
	jsr     tosicmp0
	bcs     L013D
	ldy     #$04
	lda     (regbank+4),y
	clc
	adc     #$01
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	lda     (regbank+4),y
	jsr     _cclearxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L050A
L013D:	lda     regbank+4
	ldx     regbank+4+1
	jsr     pushax
	lda     #$01
	jsr     _DrawFrame
L0133:	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _DisplayPrompt
L012B:	ldy     #$00
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ HelpPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpPrompt: near

.segment	"CODE"

	lda     #<(L016C)
	ldx     #>(L016C)
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ AnyKeyPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AnyKeyPrompt: near

.segment	"CODE"

	lda     #<(L0170)
	ldx     #>(L0170)
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsAbortKey (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsAbortKey: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	cmp     #$1B
	bne     L050D
	lda     #$01
	jmp     incsp1
L050D:	lda     (sp,x)
	cmp     #$03
	bne     L050E
	lda     #$01
	jmp     incsp1
L050E:	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ Input (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Input: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp8
	lda     #$00
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     #$28
	jsr     _cclearxy
	lda     #$01
	jsr     _textcolor
	ldy     #$05
	sta     (sp),y
	lda     #$00
	jsr     pusha
	lda     #$18
	jsr     pusha
	ldy     #$0E
	jsr     ldaxysp
	jsr     _cputsxy
	lda     #$0F
	jsr     _textcolor
	jsr     _wherex
	ldy     #$03
	sta     (sp),y
	lda     #$01
	jsr     _cursor
	ldy     #$04
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
L0190:	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	jsr     _isalnum
	stx     tmp1
	ora     tmp1
	beq     L0195
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldy     #$08
	cmp     (sp),y
	bcs     L0195
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0512
L0195:	ldy     #$02
	lda     (sp),y
	beq     L01A3
	ldy     #$00
	lda     (sp),y
	cmp     #$14
	bne     L0519
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     #$20
	jsr     _cputcxy
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     _gotoxy
	jmp     L01B8
L01A3:	tay
L0519:	lda     (sp),y
	cmp     #$0D
	bne     L0517
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	lda     #$01
	jmp     L0518
L0517:	lda     (sp),y
	jsr     _IsAbortKey
	tax
	beq     L01B8
	lda     #$02
L0518:	ldy     #$01
L0512:	sta     (sp),y
L01B8:	ldy     #$01
	lda     (sp),y
	jeq     L0190
	ldy     #$04
	lda     (sp),y
	jsr     _cursor
	ldy     #$05
	lda     (sp),y
	jsr     _textcolor
	jsr     _DrawFrames
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	ldy     #$06
	jsr     staxysp
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	ldy     #$09
	jsr     pushwysp
	lda     #$00
	jsr     _ActivateFrame
	ldy     #$01
	lda     (sp),y
	cmp     #$01
	jsr     booleq
	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputHex (__near__ unsigned char *, __near__ unsigned int *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputHex: near

.segment	"CODE"

	jsr     pushax
	ldy     #$0A
	jsr     subysp
	ldy     #$0F
	jsr     pushwysp
	lda     #$07
	jsr     leaa0sp
	jsr     pushax
	lda     #$04
	jsr     _Input
	tax
	jeq     L01F7
	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     _isxdigit
	stx     tmp1
	ora     tmp1
	bne     L01CF
	tax
	jmp     L01F7
L01CF:	lda     #$05
	jsr     leaa0sp
	ldy     #$03
	jsr     staxysp
	ldx     #$00
	txa
	jsr     stax0sp
	jmp     L01DE
L01DC:	jsr     ldax0sp
	jsr     shlax4
	jsr     stax0sp
	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _isdigit
	stx     tmp1
	ora     tmp1
	beq     L01E7
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$30
	jmp     L051B
L01E7:	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _toupper
	ldy     #$B7
	jsr     decaxy
	ldy     #$02
L051B:	sta     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L01DE:	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	tax
	beq     L051A
	lda     (sp),y
	ldx     #$00
	jsr     _isxdigit
	stx     tmp1
	ora     tmp1
	bne     L01DC
L051A:	ldy     #$0B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	ldx     #$00
	tya
L01F7:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ ErrorPrompt (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ErrorPrompt: near

.segment	"CODE"

	jsr     pushax
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _DisplayPrompt
	jsr     _cgetc
	jsr     ldax0sp
	jsr     _DisplayPrompt
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputGoto (__near__ unsigned int *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputGoto: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	lda     #<(L0203)
	ldx     #>(L0203)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     _InputHex
	ldy     #$00
	sta     (sp),y
	lda     (sp),y
	bne     L0521
	lda     #<(L0209)
	ldx     #>(L0209)
	jsr     _ErrorPrompt
L0521:	ldx     #$00
	lda     (sp,x)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ BreakInRomError (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_BreakInRomError: near

.segment	"CODE"

	lda     #<(L020E)
	ldx     #>(L020E)
	jmp     _ErrorPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ DbgSetTmpBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgSetTmpBreak: near

.segment	"CODE"

	jsr     pushax
	jsr     _DbgGetBreakSlot
	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$80
	ldy     #$03
	sta     (ptr1),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgToggleUserBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgToggleUserBreak: near

.segment	"CODE"

	jsr     pushax
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _DbgIsBreak
	sta     regbank+4
	stx     regbank+4+1
	lda     regbank+4
	ora     regbank+4+1
	beq     L0219
	lda     #$00
	ldy     #$03
	sta     (regbank+4),y
	dec     _DbgBreakCount
	jmp     L0229
L0219:	lda     _DbgBreakCount
	cmp     #$0A
	bcc     L021F
	lda     #<(L0222)
	ldx     #>(L0222)
	jsr     _ErrorPrompt
	jmp     L0229
L021F:	ldy     #$03
	jsr     ldaxysp
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L0225
	jsr     _BreakInRomError
	jmp     L0229
L0225:	jsr     _DbgGetBreakSlot
	sta     regbank+4
	stx     regbank+4+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	tya
	ldy     #$03
	sta     (regbank+4),y
	inc     _DbgBreakCount
L0229:	ldy     #$00
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgResetTmpBreaks (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgResetTmpBreaks: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L0523:	sta     (sp),y
	cmp     #$0A
	bcs     L0234
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L023B
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$03
	sta     (ptr1),y
L023B:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0523
L0234:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DbgTmpBreaksOk (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgTmpBreaksOk: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L0524:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	bcs     L0526
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L024A
	jsr     ldax0sp
	jsr     ldaxi
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L024A
	jsr     _BreakInRomError
	jsr     _DbgResetTmpBreaks
	ldx     #$00
	txa
	jmp     incsp3
L024A:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0524
L0526:	lda     #$01
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmBack (unsigned int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmBack: near

.segment	"CODE"

	jsr     pusha
	ldy     #$43
	jsr     subysp
	lda     #$06
	jsr     pusha0
L0257:	lda     #$00
	ldy     #$02
	sta     (sp),y
	ldy     #$49
	jsr     pushwysp
	ldy     #$47
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tossubax
	sec
	ldy     #$00
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	ldy     #$43
	jsr     staxysp
L0260:	ldy     #$44
	jsr     ldaxysp
	jsr     _DbgDisAsmLen
	ldy     #$43
	jsr     addeqysp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L052A
	inx
	clc
L052A:	adc     #$03
	bcc     L0269
	inx
	clc
L0269:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$44
	jsr     ldaxysp
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	and     #$1F
	sta     (sp),y
	ldy     #$44
	jsr     ldaxysp
	ldy     #$46
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcc     L0260
	ldy     #$44
	jsr     ldaxysp
	ldy     #$46
	cmp     (sp),y
	bne     L052C
	txa
	iny
	cmp     (sp),y
	beq     L0271
L052C:	ldy     #$01
	lda     (sp),y
	bne     L052E
	dey
	lda     (sp),y
	cmp     #$0C
	bne     L052E
L0271:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	sec
	ldy     #$45
	sbc     (sp),y
	sec
	sbc     #$01
	and     #$1F
	asl     a
	bcc     L052B
	inx
	clc
L052B:	adc     #$03
	bcc     L0277
	inx
	clc
L0277:	adc     sp
	tay
	txa
	adc     sp+1
	tax
	tya
	jsr     ldaxi
	jmp     L0258
L052E:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	jmp     L0257
L0258:	ldy     #$48
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateAsm: near

.segment	"CODE"

	ldy     #$2A
	jsr     subysp
	lda     _AsmFrame+8
	jsr     pusha
	lda     _AsmFrame+4
	clc
	adc     #$01
	jsr     pusha
	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     #$02
	jsr     _AsmBack
	jsr     pushax
	lda     _AsmFrame+5
	clc
	adc     #$01
	ldy     #$04
L0531:	sta     (sp),y
	cmp     _AsmFrame+7
	jcs     L0282
	jsr     pushw0sp
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	jsr     _DbgDisAsm
	ldy     #$05
	sta     (sp),y
	jsr     ldax0sp
	cpx     _brk_pc+1
	bne     L028E
	cmp     _brk_pc
	bne     L028E
	lda     #$2D
	ldy     #$0A
	sta     (sp),y
	lda     #$3E
	iny
	sta     (sp),y
L028E:	jsr     ldax0sp
	jsr     _DbgIsBreak
	stx     tmp1
	ora     tmp1
	beq     L0296
	lda     #$2A
	ldy     #$0B
	sta     (sp),y
L0296:	jsr     ldax0sp
	cpx     _AsmAddr+1
	bne     L029C
	cmp     _AsmAddr
	bne     L029C
	lda     #$01
	jsr     _revers
	lda     #$01
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$08
	jsr     leaa0sp
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	jmp     L02A6
L029C:	lda     #$01
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$08
	jsr     leaa0sp
	jsr     _cputsxy
L02A6:	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0531
L0282:	jsr     ldax0sp
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmArg16: near

.segment	"CODE"

	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     incax1
	ldy     #$01
	jmp     ldaxidx

.endproc

; ---------------------------------------------------------------
; void __near__ AsmFollow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmFollow: near

.segment	"CODE"

	lda     _AsmAddr+1
	sta     ptr1+1
	lda     _AsmAddr
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	cmp     #$10
	beq     L02C0
	cmp     #$20
	beq     L02B6
	cmp     #$30
	beq     L02C0
	cmp     #$40
	beq     L0536
	cmp     #$4C
	beq     L02B6
	cmp     #$50
	beq     L02C0
	cmp     #$60
	beq     L0535
	cmp     #$6C
	beq     L02BC
	cmp     #$70
	beq     L02C0
	cmp     #$90
	beq     L02C0
	cmp     #$B0
	beq     L02C0
	cmp     #$D0
	beq     L02C0
	cmp     #$F0
	beq     L02C0
	rts
L02B6:	jsr     _AsmArg16
	jmp     L0537
L02BC:	jsr     _AsmArg16
	jmp     L0533
L02C0:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     incax2
	jsr     pushax
	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     incax1
	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	jmp     L0537
L0535:	ldx     #$01
	txa
	clc
	adc     _DbgSP
	bcc     L0532
	inx
L0532:	jsr     ldaxi
	jsr     incax1
	jmp     L0537
L0536:	ldx     #$01
	lda     #$02
	clc
	adc     _DbgSP
	bcc     L0533
	inx
L0533:	jsr     ldaxi
L0537:	sta     _AsmAddr
	stx     _AsmAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AsmHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHome: near

.segment	"CODE"

	lda     _brk_pc+1
	sta     _AsmAddr+1
	lda     _brk_pc
	sta     _AsmAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitAsm: near

.segment	"CODE"

	jsr     _AsmHome
	jmp     _UpdateAsm

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateReg: near

.segment	"CODE"

	lda     _RegFrame+4
	clc
	adc     #$05
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$02
	jsr     pusha
	lda     _RegFrame+5
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _cputhex16
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_sr
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_a
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_x
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgSP
	jsr     _cputhex8
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgCS
	ldx     _DbgCS+1
	jsr     _cputhex16
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgHI
	ldx     _DbgHI+1
	jsr     _cputhex16
	ldx     #$00
	txa
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ InitReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitReg: near

.segment	"CODE"

	jmp     _UpdateReg

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateStack: near

.segment	"CODE"

	lda     _StackAddr
	jsr     pusha
	lda     _StackFrame+4
	clc
	adc     #$01
	jsr     pusha
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$06
	jsr     pusha
	jsr     decsp1
	lda     _StackFrame+7
	sec
	sbc     #$01
	ldy     #$00
L053B:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	sec
	sbc     _StackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L0353
	bcc     L0353
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldx     #$01
	lda     #$00
	clc
	ldy     #$03
	adc     (sp),y
	bcc     L0539
	inx
L0539:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _cputhex8
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L053B
L0353:	ldy     #$03
	lda     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ StackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHome: near

.segment	"CODE"

	lda     _DbgSP
	clc
	adc     #$01
	sta     _StackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitStack: near

.segment	"CODE"

	jsr     _StackHome
	jmp     _UpdateStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateCStack: near

.segment	"CODE"

	lda     _CStackAddr
	ldx     _CStackAddr+1
	jsr     pushax
	lda     _CStackFrame+4
	clc
	adc     #$05
	jsr     pusha
	jsr     decsp1
	lda     _CStackFrame+7
	sec
	sbc     #$01
	ldy     #$00
L053D:	sta     (sp),y
	sec
	sbc     _CStackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L053E
	bcc     L053E
	iny
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _cputhex16
	ldy     #$02
	ldx     #$00
	tya
	jsr     addeqysp
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	jmp     L053D
L053E:	lda     _CStackFrame+4
	clc
	adc     #$01
	jsr     pusha
	lda     _CStackFrame+7
	sec
	sbc     #$01
	jsr     pusha
	lda     #<(L03A4)
	ldx     #>(L03A4)
	jsr     _cputsxy
	ldy     #$03
	jsr     ldaxysp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ CStackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHome: near

.segment	"CODE"

	lda     _DbgCS+1
	sta     _CStackAddr+1
	lda     _DbgCS
	sta     _CStackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitCStack: near

.segment	"CODE"

	jsr     _CStackHome
	jmp     _UpdateCStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateDump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateDump: near

.segment	"CODE"

	ldy     #$29
	jsr     subysp
	lda     _DumpAddr
	ldx     _DumpAddr+1
	jsr     pushax
	lda     _DumpFrame+4
	clc
	adc     #$01
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	lda     _DumpFrame+5
	clc
	adc     #$01
	ldy     #$05
L053F:	sta     (sp),y
	cmp     _DumpFrame+7
	bcs     L03D9
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	jsr     pushwysp
	lda     #$0A
	jsr     leaa0sp
	jsr     pushax
	lda     #$08
	jsr     pusha
	jsr     _DbgMemDump
	jsr     _cputsxy
	ldy     #$03
	ldx     #$00
	lda     #$08
	jsr     addeqysp
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	jmp     L053F
L03D9:	dey
	jsr     ldaxysp
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DumpHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHome: near

.segment	"CODE"

	lda     #$00
	sta     _DumpAddr
	sta     _DumpAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetArg16: near

.segment	"CODE"

	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     incax1
	ldy     #$01
	jmp     ldaxidx

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetStack16 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetStack16: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp,x)
	clc
	adc     _DbgSP
	bcc     L0540
	inx
L0540:	sta     ptr1
	stx     ptr1+1
	ldx     #$01
	txa
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldaxi
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ SetRTSBreak (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetRTSBreak: near

.segment	"CODE"

	lda     #$00
	jsr     _GetStack16
	jsr     incax1
	jmp     _DbgSetTmpBreak

.endproc

; ---------------------------------------------------------------
; void __near__ DbgEntry (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgEntry: near

.segment	"DATA"

L0494:
	.byte	$01

.segment	"CODE"

	jsr     decsp2
	lda     L0494
	beq     L0496
	lda     #$00
	sta     L0494
	jsr     _RedrawStatic
	jsr     _InitAsm
	jsr     _InitReg
	jsr     _InitStack
	jsr     _InitCStack
	jsr     _UpdateDump
L0496:	jsr     _AsmHome
	jsr     _UpdateReg
	jsr     _StackHome
	jsr     _CStackHome
	lda     #$00
	tay
	sta     (sp),y
	jmp     L0545
L04A7:	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	ldy     #$0C
	jsr     ldaxidx
	jsr     callax
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	jeq     L0544
	cmp     #$0D
	jeq     L04DF
	cmp     #$20
	jeq     L04D5
	cmp     #$31
	beq     L0543
	cmp     #$32
	beq     L0543
	cmp     #$33
	beq     L0543
	cmp     #$34
	beq     L0543
	cmp     #$35
	beq     L0543
	cmp     #$3F
	beq     L04BF
	cmp     #$43
	jeq     L0544
	cmp     #$48
	beq     L04CB
	cmp     #$51
	jeq     L04F9
	cmp     #$52
	jeq     L04F5
	cmp     #$53
	jeq     L04EF
	cmp     #$55
	beq     L04C4
	cmp     #$85
	beq     L04BF
	cmp     #$86
	beq     L04C4
	cmp     #$88
	beq     L04D5
	cmp     #$8A
	beq     L04CB
	cmp     #$8C
	beq     L04DF
	jmp     L04B0
L0543:	lda     (sp),y
	ldy     #$31
	jsr     decaxy
	jsr     pushax
	lda     #$00
	jsr     _ActivateFrame
	jmp     L04B0
L04BF:	jsr     _HelpHandler
	jmp     L04B0
L04C4:	jsr     _SetRTSBreak
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0545
L04CB:	lda     _brk_pc
	ldx     _brk_pc+1
	cpx     _AsmAddr+1
	bne     L0546
	cmp     _AsmAddr
	beq     L04B0
L0546:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgSetTmpBreak
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0545
L04D5:	tya
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L04B0
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0545
L04DF:	txa
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L04B0
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jmp     L0545
L0544:	tya
	dey
	sta     (sp),y
	jmp     L0545
L04EF:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	clc
	adc     _brk_pc
	sta     _brk_pc
	txa
	adc     _brk_pc+1
	sta     _brk_pc+1
	jsr     _InitAsm
	jmp     L04B0
L04F5:	lda     _ActiveFrame
	jsr     _Redraw
	jmp     L04B0
L04F9:	jsr     _clrscr
	ldx     #$00
	lda     #$01
	jsr     _exit
L04B0:	ldy     #$00
L0545:	lda     (sp),y
	jeq     L04A7
	jmp     incsp2

.endproc

