;
; File generated by cc65 v 2.17 - Git 582aa41
;
	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_exit
	.import		_strlen
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_wherex
	.import		_cputc
	.import		_cputcxy
	.import		_cputsxy
	.import		_cgetc
	.import		_cursor
	.import		_revers
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_chline
	.import		_chlinexy
	.import		_cvlinexy
	.import		_cclearxy
	.import		_cputhex8
	.import		_cputhex16
	.import		_isalnum
	.import		_isdigit
	.import		_isxdigit
	.import		_toupper
	.import		_brk_a
	.import		_brk_x
	.import		_brk_y
	.import		_brk_sr
	.import		_brk_pc
	.import		_DbgDisAsm
	.import		_DbgDisAsmLen
	.import		_DbgIsRAM
	.import		_DbgMemDump
	.import		_DbgSP
	.import		_DbgCS
	.import		_DbgHI
	.export		_DbgBreakCount
	.export		_DbgBreaks
	.import		_DbgGetBreakSlot
	.import		_DbgIsBreak
	.export		_DbgEntry

.segment	"DATA"

_ActiveFrame:
	.word	$FFFF
_ActivePrompt:
	.word	$0000
_DbgBreakCount:
	.byte	$00

.segment	"RODATA"

_RegText:
	.byte	$01
	.byte	$00
	.addr	L0011
	.byte	$01
	.byte	$01
	.addr	L0015
	.byte	$01
	.byte	$02
	.addr	L0019
	.byte	$01
	.byte	$03
	.addr	L001D
	.byte	$01
	.byte	$04
	.addr	L0021
	.byte	$01
	.byte	$05
	.addr	L0025
	.byte	$01
	.byte	$06
	.addr	L0029
	.byte	$01
	.byte	$07
	.addr	L002D
_HelpText:
	.byte	$01
	.byte	$00
	.addr	L0031
	.byte	$01
	.byte	$01
	.addr	L0035
	.byte	$01
	.byte	$02
	.addr	L0039
	.byte	$01
	.byte	$03
	.addr	L003D
	.byte	$01
	.byte	$04
	.addr	L0041
	.byte	$01
	.byte	$05
	.addr	L0045
	.byte	$01
	.byte	$06
	.addr	L0049
	.byte	$01
	.byte	$07
	.addr	L004D
	.byte	$01
	.byte	$08
	.addr	L0051
	.byte	$01
	.byte	$09
	.addr	L0055
	.byte	$01
	.byte	$0A
	.addr	L0059
	.byte	$01
	.byte	$0B
	.addr	L005D
	.byte	$01
	.byte	$0C
	.addr	L0061
	.byte	$01
	.byte	$0D
	.addr	L0065
	.byte	$01
	.byte	$0E
	.addr	L0069
	.byte	$01
	.byte	$0F
	.addr	L006D
	.byte	$01
	.byte	$10
	.addr	L0071
	.byte	$01
	.byte	$11
	.addr	L0075
_AsmFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$0F
	.byte	$1D
	.byte	$0E
	.byte	$01
	.addr	_AsmHandler
	.byte	$00
	.word	$0000
_RegFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$1E
	.byte	$00
	.byte	$27
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_RegHandler
	.byte	$08
	.addr	_RegText
_StackFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$1E
	.byte	$09
	.byte	$27
	.byte	$0F
	.byte	$08
	.byte	$05
	.byte	$01
	.addr	_StackHandler
	.byte	$00
	.word	$0000
_CStackFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$1E
	.byte	$0F
	.byte	$27
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$01
	.addr	_CStackHandler
	.byte	$00
	.word	$0000
_DumpFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$00
	.byte	$0F
	.byte	$1E
	.byte	$18
	.byte	$1D
	.byte	$08
	.byte	$01
	.addr	_DumpHandler
	.byte	$00
	.word	$0000
_HelpFrame:
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$18
	.byte	$26
	.byte	$17
	.byte	$00
	.addr	_HelpHandler
	.byte	$12
	.addr	_HelpText
_Frames:
	.addr	_AsmFrame
	.addr	_RegFrame
	.addr	_StackFrame
	.addr	_CStackFrame
	.addr	_DumpFrame
	.addr	_HelpFrame
L0039:
	.byte	$46,$33,$2C,$20,$75,$20,$20,$20,$20,$20,$52,$75,$6E,$20,$75,$6E
	.byte	$74,$69,$6C,$20,$73,$75,$62,$72,$6F,$75,$74,$69,$6E,$65,$20,$72
	.byte	$65,$74,$75,$72,$6E,$73,$00
L021C:
	.byte	$43,$61,$6E,$6E,$6F,$74,$20,$73,$65,$74,$20,$62,$72,$65,$61,$6B
	.byte	$70,$6F,$69,$6E,$74,$20,$2D,$20,$70,$72,$65,$73,$73,$20,$61,$20
	.byte	$6B,$65,$79,$00
L0230:
	.byte	$54,$6F,$6F,$20,$6D,$61,$6E,$79,$20,$62,$72,$65,$61,$6B,$70,$6F
	.byte	$69,$6E,$74,$73,$20,$2D,$20,$70,$72,$65,$73,$73,$20,$61,$20,$6B
	.byte	$65,$79,$00
L0075:
	.byte	$73,$20,$20,$20,$20,$20,$20,$20,$20,$20,$53,$6B,$69,$70,$20,$6E
	.byte	$65,$78,$74,$20,$69,$6E,$73,$74,$72,$75,$63,$74,$69,$6F,$6E,$00
L0049:
	.byte	$31,$2D,$35,$20,$20,$20,$20,$20,$20,$20,$53,$65,$6C,$65,$63,$74
	.byte	$20,$61,$63,$74,$69,$76,$65,$20,$77,$69,$6E,$64,$6F,$77,$00
L0069:
	.byte	$70,$20,$20,$20,$20,$20,$20,$20,$20,$20,$55,$73,$65,$20,$61,$73
	.byte	$20,$6E,$65,$77,$20,$50,$43,$20,$76,$61,$6C,$75,$65,$00
L0061:
	.byte	$66,$20,$20,$20,$20,$20,$20,$20,$20,$20,$46,$6F,$6C,$6C,$6F,$77
	.byte	$20,$69,$6E,$73,$74,$72,$75,$63,$74,$69,$6F,$6E,$00
L0035:
	.byte	$46,$32,$2C,$20,$74,$20,$20,$20,$20,$20,$54,$6F,$67,$67,$6C,$65
	.byte	$20,$62,$72,$65,$61,$6B,$70,$6F,$69,$6E,$74,$00
L0217:
	.byte	$49,$6E,$76,$61,$6C,$69,$64,$20,$69,$6E,$70,$75,$74,$20,$2D,$20
	.byte	$70,$72,$65,$73,$73,$20,$61,$20,$6B,$65,$79,$00
L017E:
	.byte	$50,$72,$65,$73,$73,$20,$61,$6E,$79,$20,$6B,$65,$79,$20,$74,$6F
	.byte	$20,$63,$6F,$6E,$74,$69,$6E,$75,$65,$00
L003D:
	.byte	$46,$34,$2C,$20,$68,$20,$20,$20,$20,$20,$52,$75,$6E,$20,$74,$6F
	.byte	$20,$63,$75,$72,$73,$6F,$72,$00
L0071:
	.byte	$72,$20,$20,$20,$20,$20,$20,$20,$20,$20,$52,$65,$64,$72,$61,$77
	.byte	$20,$73,$63,$72,$65,$65,$6E,$00
L0059:
	.byte	$61,$2F,$7A,$20,$20,$20,$20,$20,$20,$20,$4D,$6F,$76,$65,$20,$75
	.byte	$70,$2F,$64,$6F,$77,$6E,$00
L0055:
	.byte	$43,$75,$72,$73,$6F,$72,$20,$20,$20,$20,$4D,$6F,$76,$65,$20,$75
	.byte	$70,$2F,$64,$6F,$77,$6E,$00
L0065:
	.byte	$6F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$47,$6F,$74,$6F,$20,$6F
	.byte	$72,$69,$67,$69,$6E,$00
L0041:
	.byte	$46,$37,$2C,$20,$73,$70,$61,$63,$65,$20,$53,$74,$65,$70,$20,$69
	.byte	$6E,$74,$6F,$00
L0045:
	.byte	$46,$38,$2C,$20,$65,$6E,$74,$65,$72,$20,$53,$74,$65,$70,$20,$6F
	.byte	$76,$65,$72,$00
L004D:
	.byte	$2B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$61,$67,$65,$20,$64
	.byte	$6F,$77,$6E,$00
L005D:
	.byte	$63,$20,$20,$20,$20,$20,$20,$20,$20,$20,$43,$6F,$6E,$74,$69,$6E
	.byte	$75,$65,$00
L0051:
	.byte	$2D,$20,$20,$20,$20,$20,$20,$20,$20,$20,$50,$61,$67,$65,$20,$75
	.byte	$70,$00
L017A:
	.byte	$50,$72,$65,$73,$73,$20,$46,$31,$20,$66,$6F,$72,$20,$68,$65,$6C
	.byte	$70,$00
L006D:
	.byte	$71,$20,$20,$20,$20,$20,$20,$20,$20,$20,$51,$75,$69,$74,$00
L0031:
	.byte	$46,$31,$2C,$20,$3F,$20,$20,$20,$20,$20,$48,$65,$6C,$70,$00
L0211:
	.byte	$47,$6F,$74,$6F,$3A,$20,$00
L0015:
	.byte	$53,$52,$00
L0029:
	.byte	$43,$53,$00
L002D:
	.byte	$48,$49,$00
L0025:
	.byte	$53,$50,$00
L03BB:
	.byte	$2D,$3E,$00
L0011:
	.byte	$50,$43,$00
L001D:
	.byte	$58,$00
L0019:
	.byte	$41,$00
L0021:
	.byte	$59,$00

.segment	"BSS"

_AsmAddr:
	.res	2,$00
_DumpAddr:
	.res	2,$00
_CStackAddr:
	.res	2,$00
_StackAddr:
	.res	1,$00
_PromptColor:
	.res	1,$00
_PromptLength:
	.res	1,$00
_DbgBreaks:
	.res	48,$00

; ---------------------------------------------------------------
; unsigned char __near__ AsmHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHandler: near

.segment	"CODE"

	jsr     decsp3
L02F8:	jsr     _UpdateAsm
	jsr     stax0sp
	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$02
	beq     L030D
	cmp     #$0A
	jeq     L0329
	cmp     #$0B
	beq     L0321
	cmp     #$2B
	beq     L0303
	cmp     #$2D
	beq     L0307
	cmp     #$61
	beq     L0321
	cmp     #$66
	beq     L0313
	cmp     #$67
	beq     L0316
	cmp     #$6F
	beq     L031A
	cmp     #$70
	beq     L031D
	cmp     #$74
	beq     L030D
	cmp     #$7A
	beq     L0329
	jmp     L0519
L0303:	jsr     ldax0sp
	sta     _AsmAddr
	stx     _AsmAddr+1
	bra     L02F8
L0307:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     _AsmFrame+9
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	bra     L02F8
L030D:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgToggleUserBreak
	bra     L02F8
L0313:	jsr     _AsmFollow
	bra     L02F8
L0316:	lda     #<(_AsmAddr)
	ldx     #>(_AsmAddr)
	jsr     _InputGoto
	bra     L02F8
L031A:	jsr     _AsmHome
	jmp     L02F8
L031D:	lda     _AsmAddr+1
	sta     _brk_pc+1
	lda     _AsmAddr
	sta     _brk_pc
	jmp     L02F8
L0321:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     #$01
	jsr     _AsmBack
	sta     _AsmAddr
	stx     _AsmAddr+1
	jmp     L02F8
L0329:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgDisAsmLen
	clc
	adc     _AsmAddr
	sta     _AsmAddr
	txa
	adc     _AsmAddr+1
	sta     _AsmAddr+1
	jmp     L02F8
L0519:	ldx     #$00
	lda     (sp),y
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ RegHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RegHandler: near

.segment	"CODE"

	jmp     _GetKeyUpdate

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ StackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _StackFrame+9
	jsr     pusha
L0385:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$0A
	beq     L039E
	cmp     #$0B
	beq     L0399
	cmp     #$2B
	beq     L038E
	cmp     #$2D
	beq     L0392
	cmp     #$61
	beq     L0399
	cmp     #$6F
	beq     L0396
	cmp     #$7A
	beq     L039E
	bra     L051A
L038E:	lda     (sp)
	clc
	adc     _StackAddr
	sta     _StackAddr
	bra     L038C
L0392:	lda     (sp)
	eor     #$FF
	sec
	adc     _StackAddr
	sta     _StackAddr
	bra     L038C
L0396:	jsr     _StackHome
	bra     L038C
L0399:	dec     _StackAddr
	bra     L038C
L039E:	inc     _StackAddr
	bra     L038C
L051A:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L038C:	jsr     _UpdateStack
	bra     L0385

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ CStackHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHandler: near

.segment	"CODE"

	jsr     decsp1
	lda     _CStackFrame+9
	asl     a
	jsr     pusha
L03C6:	jsr     _GetKeyUpdate
	ldy     #$01
	sta     (sp),y
	cmp     #$0A
	beq     L03E1
	cmp     #$0B
	beq     L03DA
	cmp     #$2B
	beq     L03CF
	cmp     #$2D
	beq     L03D3
	cmp     #$61
	beq     L03DA
	cmp     #$6F
	beq     L03D7
	cmp     #$7A
	beq     L03E1
	bra     L051B
L03CF:	lda     (sp)
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	lda     #$00
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	bra     L03CD
L03D3:	lda     (sp)
	eor     #$FF
	sec
	adc     _CStackAddr
	sta     _CStackAddr
	lda     #$FF
	adc     _CStackAddr+1
	sta     _CStackAddr+1
	bra     L03CD
L03D7:	jsr     _CStackHome
	bra     L03CD
L03DA:	lda     _CStackAddr
	sec
	sbc     #$02
	sta     _CStackAddr
	bcs     L03CD
	dec     _CStackAddr+1
	bra     L03CD
L03E1:	lda     #$02
	clc
	adc     _CStackAddr
	sta     _CStackAddr
	bcc     L03CD
	inc     _CStackAddr+1
	bra     L03CD
L051B:	ldx     #$00
	lda     (sp),y
	jmp     incsp2
L03CD:	jsr     _UpdateCStack
	bra     L03C6

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DumpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHandler: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     _DumpFrame+9
	jsr     shlax3
	jsr     pushax
L0408:	jsr     _GetKeyUpdate
	ldy     #$02
	sta     (sp),y
	cmp     #$0A
	beq     L0427
	cmp     #$0B
	beq     L0420
	cmp     #$2B
	beq     L0411
	cmp     #$2D
	beq     L0415
	cmp     #$61
	beq     L0420
	cmp     #$67
	beq     L0419
	cmp     #$6F
	beq     L041D
	cmp     #$7A
	beq     L0427
	bra     L051C
L0411:	jsr     ldax0sp
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	bra     L040F
L0415:	jsr     ldax0sp
	eor     #$FF
	sec
	adc     _DumpAddr
	sta     _DumpAddr
	txa
	eor     #$FF
	adc     _DumpAddr+1
	sta     _DumpAddr+1
	bra     L040F
L0419:	lda     #<(_DumpAddr)
	ldx     #>(_DumpAddr)
	jsr     _InputGoto
	bra     L040F
L041D:	jsr     _DumpHome
	bra     L040F
L0420:	lda     _DumpAddr
	sec
	sbc     #$08
	sta     _DumpAddr
	bcs     L040F
	dec     _DumpAddr+1
	bra     L040F
L0427:	lda     #$08
	clc
	adc     _DumpAddr
	sta     _DumpAddr
	bcc     L040F
	inc     _DumpAddr+1
	bra     L040F
L051C:	ldx     #$00
	lda     (sp),y
	jmp     incsp3
L040F:	jsr     _UpdateDump
	jmp     L0408

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ HelpHandler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpHandler: near

.segment	"CODE"

	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     pushax
	lda     #$05
	jsr     pusha0
	lda     #$01
	jsr     _ActivateFrame
	jsr     _AnyKeyPrompt
	jsr     _cgetc
	lda     (sp)
	jsr     _Redraw
	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ DisplayPrompt (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DisplayPrompt: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	lda     #$01
	jsr     _textcolor
	sta     (sp)
	lda     _ActivePrompt
	ora     _ActivePrompt+1
	beq     L015F
	lda     _PromptColor
	jsr     _textcolor
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     _PromptLength
	jsr     _chlinexy
L015F:	ldy     #$02
	jsr     ldaxysp
	sta     _ActivePrompt
	stx     _ActivePrompt+1
	lda     (sp)
	sta     _PromptColor
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _strlen
	sta     _PromptLength
	lda     #$01
	jsr     _textcolor
	lda     #$28
	sec
	sbc     _PromptLength
	lsr     a
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _cputsxy
	lda     _PromptColor
	jsr     _textcolor
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ SingleStep (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SingleStep: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     _brk_pc+1
	sta     ptr1+1
	lda     _brk_pc
	sta     ptr1
	lda     (ptr1)
	cmp     #$10
	beq     L0461
	cmp     #$20
	beq     L0474
	cmp     #$30
	beq     L0461
	cmp     #$40
	beq     L046F
	cmp     #$4C
	beq     L044B
	cmp     #$50
	beq     L0461
	cmp     #$60
	beq     L046C
	cmp     #$6C
	beq     L044F
	cmp     #$70
	beq     L0461
	cmp     #$90
	beq     L0461
	cmp     #$B0
	beq     L0461
	cmp     #$D0
	beq     L0461
	cmp     #$F0
	beq     L0461
	bra     L0449
L044B:	jsr     _GetArg16
	bra     L051D
L044F:	jsr     _GetArg16
	jsr     ldaxi
	bra     L051D
L0461:	lda     _brk_pc
	ldx     _brk_pc+1
	ldy     #$01
	jsr     ldaidx
	sta     (sp)
	lda     (sp)
	beq     L0449
	ldx     #$00
	lda     (sp)
	bpl     L046A
	dex
L046A:	clc
	adc     _brk_pc
	pha
	txa
	adc     _brk_pc+1
	tax
	pla
	jsr     incax2
	jsr     _DbgSetTmpBreak
	bra     L0449
L046C:	jsr     _SetRTSBreak
	jmp     incsp2
L046F:	lda     #$01
	jsr     _GetStack16
	bra     L051D
L0474:	ldy     #$01
	lda     (sp),y
	beq     L0449
	jsr     _GetArg16
	bra     L051D
L0449:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     pushax
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	jsr     tosaddax
L051D:	jsr     _DbgSetTmpBreak
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ RedrawStatic (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_RedrawStatic: near

.segment	"CODE"

	jsr     pusha
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	ina
	jsr     _bordercolor
	lda     #$00
	jsr     _bgcolor
	jsr     _clrscr
	lda     #$00
	jsr     _cursor
	lda     #$0F
	jsr     _textcolor
	jsr     _DrawFrames
	jsr     _HelpPrompt
	lda     (sp)
	jsr     pusha0
	lda     #$00
	jsr     _ActivateFrame
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ Redraw (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Redraw: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	jsr     _RedrawStatic
	jsr     _UpdateAsm
	jsr     _UpdateReg
	jsr     _UpdateStack
	jsr     _UpdateCStack
	jsr     _UpdateDump
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ GetKeyUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetKeyUpdate: near

.segment	"BSS"

L0496:
	.res	1,$00

.segment	"CODE"

	bra     L0499
L051E:	lda     L0496
	beq     L049F
	cmp     #$01
	beq     L04A2
	cmp     #$02
	beq     L04A5
	cmp     #$03
	beq     L04A8
	bra     L051F
L049F:	jsr     _UpdateAsm
	bra     L051F
L04A2:	jsr     _UpdateStack
	bra     L051F
L04A5:	jsr     _UpdateCStack
	bra     L051F
L04A8:	jsr     _UpdateDump
L051F:	lda     L0496
	ina
	and     #$03
	sta     L0496
L0499:	jsr     _kbhit
	tax
	beq     L051E
	jmp     _cgetc

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrame (register __near__ const struct $anon-struct-000A *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrame: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	ldx     #$04
	jsr     regswap2
	ldy     #$0B
	jsr     subysp
	ldy     #$0B
	lda     (sp),y
	beq     L00DC
	lda     #$01
	jsr     _textcolor
	sta     (sp)
	lda     #$2B
	ldy     #$07
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	bra     L0522
L00DC:	lda     #$0F
	jsr     _textcolor
	sta     (sp)
	lda     (regbank+4)
	ldy     #$07
	sta     (sp),y
	ldy     #$01
	lda     (regbank+4),y
	ldy     #$06
	sta     (sp),y
	ldy     #$02
	lda     (regbank+4),y
	ldy     #$05
	sta     (sp),y
	ldy     #$03
	lda     (regbank+4),y
L0522:	ldy     #$04
	sta     (sp),y
	lda     (regbank+4),y
	dey
	sta     (sp),y
	ldy     #$05
	lda     (regbank+4),y
	ldy     #$02
	sta     (sp),y
	ldy     #$08
	lda     (regbank+4),y
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$06
	lda     (sp),y
	jsr     _cputc
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	ldy     #$05
	lda     (sp),y
	jsr     _cputc
	ldy     #$01
	lda     (sp),y
	jsr     _chline
	ldy     #$04
	lda     (sp),y
	jsr     _cputc
	ldy     #$06
	lda     (regbank+4),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$09
	lda     (regbank+4),y
	jsr     _cvlinexy
	lda     #$0F
	jsr     _textcolor
	ldy     #$0D
	lda     (regbank+4),y
	ldy     #$08
	sta     (sp),y
	ldy     #$0F
	lda     (regbank+4),y
	tax
	dey
	lda     (regbank+4),y
	ldy     #$09
	jsr     staxysp
	bra     L0119
L0117:	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$0C
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     tosadda0
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$0D
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     tosadda0
	jsr     pusha
	ldy     #$0C
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     _cputsxy
	ldy     #$09
	ldx     #$00
	lda     #$04
	jsr     addeqysp
L0119:	ldy     #$08
	lda     (sp),y
	pha
	dea
	sta     (sp),y
	pla
	tax
	bne     L0117
	lda     (sp)
	jsr     _textcolor
	ldy     #$0C
	lda     (sp),y
	sta     regbank+4
	iny
	lda     (sp),y
	sta     regbank+5
	iny
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DrawFrames (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawFrames: near

.segment	"CODE"

	jsr     decsp3
	lda     #$00
	ldy     #$02
L0524:	sta     (sp),y
	cmp     #$06
	bcs     L0124
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0525
	inx
	clc
L0525:	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	jsr     stax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0A
	lda     (ptr1),y
	beq     L0125
	jsr     pushw0sp
	lda     #$00
	jsr     _DrawFrame
L0125:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0524
L0124:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ ActivateFrame (int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ActivateFrame: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	cpx     _ActiveFrame+1
	bne     L052A
	cmp     _ActiveFrame
	jeq     L0137
L052A:	ldx     _ActiveFrame+1
	bmi     L0139
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     pushw
	lda     #$00
	jsr     _DrawFrame
L0139:	ldy     #$05
	jsr     ldaxysp
	sta     _ActiveFrame
	stx     _ActiveFrame+1
	txa
	bmi     L013F
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	sta     regbank+4
	stx     regbank+4+1
	ldy     #$03
	lda     (sp),y
	beq     L0149
	ldy     #$05
	lda     (regbank+4),y
	ina
	ldy     #$02
L0527:	sta     (sp),y
	lda     (sp),y
	jsr     pusha0
	ldy     #$07
	lda     (regbank+4),y
	jsr     tosicmp0
	bcs     L0149
	ldy     #$04
	lda     (regbank+4),y
	ina
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	lda     (regbank+4),y
	jsr     _cclearxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0527
L0149:	lda     regbank+4
	ldx     regbank+4+1
	jsr     pushax
	lda     #$01
	jsr     _DrawFrame
L013F:	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     _DisplayPrompt
L0137:	lda     (sp)
	sta     regbank+4
	ldy     #$01
	lda     (sp),y
	sta     regbank+5
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ HelpPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_HelpPrompt: near

.segment	"CODE"

	lda     #<(L017A)
	ldx     #>(L017A)
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ AnyKeyPrompt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AnyKeyPrompt: near

.segment	"CODE"

	lda     #<(L017E)
	ldx     #>(L017E)
	jmp     _DisplayPrompt

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ IsAbortKey (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_IsAbortKey: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp)
	cmp     #$1B
	bne     L052C
	lda     #$01
	jmp     incsp1
L052C:	lda     (sp)
	cmp     #$16
	bne     L052D
	lda     #$01
	jmp     incsp1
L052D:	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ Input (__near__ unsigned char *, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Input: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp8
	lda     #$00
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     #$28
	jsr     _cclearxy
	lda     #$01
	jsr     _textcolor
	ldy     #$05
	sta     (sp),y
	lda     #$00
	jsr     pusha
	lda     #$18
	jsr     pusha
	ldy     #$0E
	jsr     ldaxysp
	jsr     _cputsxy
	lda     #$0F
	jsr     _textcolor
	jsr     _wherex
	ldy     #$03
	sta     (sp),y
	lda     #$01
	jsr     _cursor
	ldy     #$04
	sta     (sp),y
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
L019E:	jsr     _cgetc
	sta     (sp)
	ldx     #$00
	jsr     _isalnum
	stx     tmp1
	ora     tmp1
	beq     L01A3
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldy     #$08
	cmp     (sp),y
	bcs     L01A3
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (sp)
	sta     (ptr1)
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _cputcxy
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0531
L01A3:	ldy     #$02
	lda     (sp),y
	beq     L0538
	lda     (sp)
	cmp     #$7F
	bne     L0538
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     pusha
	lda     #$20
	jsr     _cputcxy
	ldy     #$02
	lda     (sp),y
	clc
	iny
	adc     (sp),y
	jsr     pusha
	lda     #$18
	jsr     _gotoxy
	bra     L01C6
L0538:	lda     (sp)
	cmp     #$0A
	bne     L0536
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ina
	bra     L0537
L0536:	lda     (sp)
	jsr     _IsAbortKey
	tax
	beq     L01C6
	lda     #$02
L0537:	ldy     #$01
L0531:	sta     (sp),y
L01C6:	ldy     #$01
	lda     (sp),y
	jeq     L019E
	ldy     #$04
	lda     (sp),y
	jsr     _cursor
	ldy     #$05
	lda     (sp),y
	jsr     _textcolor
	jsr     _DrawFrames
	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	ldy     #$06
	jsr     staxysp
	lda     #$FF
	sta     _ActiveFrame
	sta     _ActiveFrame+1
	ldy     #$09
	jsr     pushwysp
	lda     #$00
	jsr     _ActivateFrame
	ldy     #$01
	lda     (sp),y
	cmp     #$01
	jsr     booleq
	ldy     #$0D
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputHex (__near__ unsigned char *, __near__ unsigned int *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputHex: near

.segment	"CODE"

	jsr     pushax
	ldy     #$0A
	jsr     subysp
	ldy     #$0F
	jsr     pushwysp
	lda     #$07
	jsr     leaa0sp
	jsr     pushax
	lda     #$04
	jsr     _Input
	tax
	jeq     L0205
	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     _isxdigit
	stx     tmp1
	ora     tmp1
	bne     L01DD
	tax
	jmp     L0205
L01DD:	lda     #$05
	jsr     leaa0sp
	ldy     #$03
	jsr     staxysp
	ldx     #$00
	txa
	jsr     stax0sp
	bra     L01EC
L01EA:	jsr     ldax0sp
	jsr     shlax4
	jsr     stax0sp
	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _isdigit
	stx     tmp1
	ora     tmp1
	beq     L01F5
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$30
	bra     L053A
L01F5:	ldy     #$02
	lda     (sp),y
	ldx     #$00
	jsr     _toupper
	ldy     #$37
	jsr     decaxy
	ldy     #$02
L053A:	sta     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L01EC:	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$02
	sta     (sp),y
	tax
	beq     L0539
	lda     (sp),y
	ldx     #$00
	jsr     _isxdigit
	stx     tmp1
	ora     tmp1
	bne     L01EA
L0539:	ldy     #$0B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldx     #$00
	tya
L0205:	ldy     #$0E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ ErrorPrompt (__near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ErrorPrompt: near

.segment	"CODE"

	jsr     pushax
	lda     _ActivePrompt
	ldx     _ActivePrompt+1
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _DisplayPrompt
	jsr     _cgetc
	jsr     ldax0sp
	jsr     _DisplayPrompt
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ InputGoto (__near__ unsigned int *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InputGoto: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	lda     #<(L0211)
	ldx     #>(L0211)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     _InputHex
	sta     (sp)
	lda     (sp)
	bne     L0540
	lda     #<(L0217)
	ldx     #>(L0217)
	jsr     _ErrorPrompt
L0540:	ldx     #$00
	lda     (sp)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ BreakInRomError (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_BreakInRomError: near

.segment	"CODE"

	lda     #<(L021C)
	ldx     #>(L021C)
	jmp     _ErrorPrompt

.endproc

; ---------------------------------------------------------------
; void __near__ DbgSetTmpBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgSetTmpBreak: near

.segment	"CODE"

	jsr     pushax
	jsr     _DbgGetBreakSlot
	jsr     pushax
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$80
	ldy     #$03
	sta     (ptr1),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgToggleUserBreak (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgToggleUserBreak: near

.segment	"CODE"

	jsr     pushax
	lda     regbank+4
	ldx     regbank+5
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _DbgIsBreak
	sta     regbank+4
	stx     regbank+4+1
	lda     regbank+4
	ora     regbank+4+1
	beq     L0227
	lda     #$00
	ldy     #$03
	sta     (regbank+4),y
	dec     _DbgBreakCount
	bra     L0237
L0227:	lda     _DbgBreakCount
	cmp     #$0A
	bcc     L022D
	lda     #<(L0230)
	ldx     #>(L0230)
	jsr     _ErrorPrompt
	bra     L0237
L022D:	ldy     #$03
	jsr     ldaxysp
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L0233
	jsr     _BreakInRomError
	bra     L0237
L0233:	jsr     _DbgGetBreakSlot
	sta     regbank+4
	stx     regbank+4+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	tya
	ldy     #$03
	sta     (regbank+4),y
	inc     _DbgBreakCount
L0237:	lda     (sp)
	sta     regbank+4
	ldy     #$01
	lda     (sp),y
	sta     regbank+5
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ DbgResetTmpBreaks (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgResetTmpBreaks: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L0542:	sta     (sp),y
	cmp     #$0A
	bcs     L0242
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0249
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$03
	sta     (ptr1),y
L0249:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0542
L0242:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ DbgTmpBreaksOk (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgTmpBreaksOk: near

.segment	"CODE"

	jsr     decsp1
	lda     #<(_DbgBreaks)
	ldx     #>(_DbgBreaks)
	jsr     pushax
	lda     #$00
	ldy     #$02
L0543:	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	bcs     L0545
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	cmp     #$80
	bne     L0258
	jsr     ldax0sp
	jsr     ldaxi
	jsr     _DbgIsRAM
	stx     tmp1
	ora     tmp1
	bne     L0258
	jsr     _BreakInRomError
	jsr     _DbgResetTmpBreaks
	ldx     #$00
	txa
	jmp     incsp3
L0258:	ldx     #$00
	lda     #$04
	jsr     addeq0sp
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	bra     L0543
L0545:	lda     #$01
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmBack (unsigned int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmBack: near

.segment	"CODE"

	jsr     pusha
	ldy     #$43
	jsr     subysp
	lda     #$06
	jsr     pusha0
L0265:	lda     #$00
	ldy     #$02
	sta     (sp),y
	ldy     #$49
	jsr     pushwysp
	ldy     #$47
	ldx     #$00
	lda     (sp),y
	jsr     mulax3
	jsr     tossubax
	sec
	sbc     (sp)
	pha
	txa
	ldy     #$01
	sbc     (sp),y
	tax
	pla
	ldy     #$43
	jsr     staxysp
L026E:	ldy     #$44
	jsr     ldaxysp
	jsr     _DbgDisAsmLen
	ldy     #$43
	jsr     addeqysp
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L0549
	inx
	clc
L0549:	adc     #$03
	bcc     L0277
	inx
	clc
L0277:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$44
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	iny
	lda     (sp),y
	ina
	and     #$1F
	sta     (sp),y
	ldy     #$44
	jsr     ldaxysp
	ldy     #$46
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcc     L026E
	ldy     #$44
	jsr     ldaxysp
	ldy     #$46
	cmp     (sp),y
	bne     L054C
	txa
	iny
	cmp     (sp),y
	beq     L0280
L054C:	ldy     #$01
	lda     (sp),y
	bne     L054E
	lda     (sp)
	cmp     #$0C
	bne     L054E
L0280:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	sec
	ldy     #$45
	sbc     (sp),y
	sec
	sbc     #$01
	and     #$1F
	asl     a
	bcc     L054A
	inx
	clc
L054A:	adc     #$03
	bcc     L0286
	inx
	clc
L0286:	adc     sp
	tay
	txa
	adc     sp+1
	tax
	tya
	jsr     ldaxi
	bra     L0266
L054E:	ldx     #$00
	tya
	jsr     addeq0sp
	jmp     L0265
L0266:	ldy     #$48
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateAsm: near

.segment	"CODE"

	ldy     #$2A
	jsr     subysp
	lda     _AsmFrame+8
	jsr     pusha
	lda     _AsmFrame+4
	ina
	jsr     pusha
	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     pushax
	lda     #$02
	jsr     _AsmBack
	jsr     pushax
	lda     _AsmFrame+5
	ina
	ldy     #$04
L0551:	sta     (sp),y
	cmp     _AsmFrame+7
	jcs     L0292
	jsr     pushw0sp
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	jsr     _DbgDisAsm
	ldy     #$05
	sta     (sp),y
	jsr     ldax0sp
	cpx     _brk_pc+1
	bne     L029F
	cmp     _brk_pc
	bne     L029F
	lda     #$2D
	ldy     #$0A
	sta     (sp),y
	lda     #$3E
	iny
	sta     (sp),y
L029F:	jsr     ldax0sp
	jsr     _DbgIsBreak
	stx     tmp1
	ora     tmp1
	beq     L02A7
	lda     #$2A
	ldy     #$0B
	sta     (sp),y
L02A7:	jsr     ldax0sp
	cpx     _AsmAddr+1
	bne     L02AD
	cmp     _AsmAddr
	bne     L02AD
	lda     #$01
	jsr     _revers
	lda     #$01
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$08
	jsr     leaa0sp
	jsr     _cputsxy
	lda     #$00
	jsr     _revers
	bra     L02B7
L02AD:	lda     #$01
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$08
	jsr     leaa0sp
	jsr     _cputsxy
L02B7:	ldy     #$05
	lda     (sp),y
	ldx     #$00
	jsr     addeq0sp
	ldy     #$04
	clc
	lda     #$01
	adc     (sp),y
	jmp     L0551
L0292:	jsr     ldax0sp
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ AsmArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmArg16: near

.segment	"CODE"

	lda     _AsmAddr
	ldx     _AsmAddr+1
	ina
	bne     L02C2
	inx
L02C2:	ldy     #$01
	jmp     ldaxidx

.endproc

; ---------------------------------------------------------------
; void __near__ AsmFollow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmFollow: near

.segment	"CODE"

	lda     _AsmAddr+1
	sta     ptr1+1
	lda     _AsmAddr
	sta     ptr1
	lda     (ptr1)
	cmp     #$10
	beq     L02D2
	cmp     #$20
	beq     L02C8
	cmp     #$30
	beq     L02D2
	cmp     #$40
	beq     L0558
	cmp     #$4C
	beq     L02C8
	cmp     #$50
	beq     L02D2
	cmp     #$60
	beq     L0557
	cmp     #$6C
	beq     L02CE
	cmp     #$70
	beq     L02D2
	cmp     #$90
	beq     L02D2
	cmp     #$B0
	beq     L02D2
	cmp     #$D0
	beq     L02D2
	cmp     #$F0
	beq     L02D2
	rts
L02C8:	jsr     _AsmArg16
	bra     L0559
L02CE:	jsr     _AsmArg16
	bra     L0555
L02D2:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     incax2
	jsr     pushax
	lda     _AsmAddr
	ldx     _AsmAddr+1
	ina
	bne     L02E4
	inx
L02E4:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	bra     L0559
L0557:	ldx     #$01
	txa
	clc
	adc     _DbgSP
	bcc     L0554
	inx
L0554:	jsr     ldaxi
	ina
	bne     L0559
	inx
	bra     L0559
L0558:	ldx     #$01
	lda     #$02
	clc
	adc     _DbgSP
	bcc     L0555
	inx
L0555:	jsr     ldaxi
L0559:	sta     _AsmAddr
	stx     _AsmAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AsmHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AsmHome: near

.segment	"CODE"

	lda     _brk_pc+1
	sta     _AsmAddr+1
	lda     _brk_pc
	sta     _AsmAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitAsm (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitAsm: near

.segment	"CODE"

	jsr     _AsmHome
	jmp     _UpdateAsm

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateReg: near

.segment	"CODE"

	lda     _RegFrame+4
	clc
	adc     #$05
	jsr     pusha
	lda     (sp)
	clc
	adc     #$02
	jsr     pusha
	lda     _RegFrame+5
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _cputhex16
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_sr
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_a
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_x
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _brk_y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgSP
	jsr     _cputhex8
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgCS
	ldx     _DbgCS+1
	jsr     _cputhex16
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	clc
	tya
	adc     (sp),y
	sta     (sp),y
	jsr     _gotoxy
	lda     _DbgHI
	ldx     _DbgHI+1
	jsr     _cputhex16
	ldx     #$00
	txa
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ InitReg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitReg: near

.segment	"CODE"

	jmp     _UpdateReg

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateStack: near

.segment	"CODE"

	lda     _StackAddr
	jsr     pusha
	lda     _StackFrame+4
	ina
	jsr     pusha
	lda     (sp)
	clc
	adc     #$06
	jsr     pusha
	jsr     decsp1
	lda     _StackFrame+7
	sec
	sbc     #$01
L055D:	sta     (sp)
	ldx     #$00
	lda     (sp)
	sec
	sbc     _StackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L0368
	bcc     L0368
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	lda     (sp),y
	jsr     _cputhex8
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldx     #$01
	lda     #$00
	clc
	ldy     #$03
	adc     (sp),y
	bcc     L055B
	inx
L055B:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _cputhex8
	ldy     #$03
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	lda     (sp)
	sec
	sbc     #$01
	bra     L055D
L0368:	ldy     #$03
	lda     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ StackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_StackHome: near

.segment	"CODE"

	lda     _DbgSP
	ina
	sta     _StackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitStack: near

.segment	"CODE"

	jsr     _StackHome
	jmp     _UpdateStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateCStack: near

.segment	"CODE"

	lda     _CStackAddr
	ldx     _CStackAddr+1
	jsr     pushax
	lda     _CStackFrame+4
	clc
	adc     #$05
	jsr     pusha
	jsr     decsp1
	lda     _CStackFrame+7
L0565:	sec
	sbc     #$01
	sta     (sp)
	sec
	sbc     _CStackFrame+5
	sta     tmp1
	lda     tmp1
	beq     L0562
	bcc     L0562
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	ldy     #$03
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _cputhex16
	ldy     #$02
	ldx     #$00
	tya
	jsr     addeqysp
	lda     (sp)
	bra     L0565
L0562:	lda     _CStackFrame+4
	ina
	jsr     pusha
	lda     _CStackFrame+7
	sec
	sbc     #$01
	jsr     pusha
	lda     #<(L03BB)
	ldx     #>(L03BB)
	jsr     _cputsxy
	ldy     #$03
	jsr     ldaxysp
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ CStackHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_CStackHome: near

.segment	"CODE"

	lda     _DbgCS+1
	sta     _CStackAddr+1
	lda     _DbgCS
	sta     _CStackAddr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ InitCStack (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_InitCStack: near

.segment	"CODE"

	jsr     _CStackHome
	jmp     _UpdateCStack

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ UpdateDump (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateDump: near

.segment	"CODE"

	ldy     #$29
	jsr     subysp
	lda     _DumpAddr
	ldx     _DumpAddr+1
	jsr     pushax
	lda     _DumpFrame+4
	ina
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	lda     _DumpFrame+5
	ina
	ldy     #$05
L0566:	sta     (sp),y
	cmp     _DumpFrame+7
	bcs     L03F1
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$06
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	jsr     pushwysp
	lda     #$0A
	jsr     leaa0sp
	jsr     pushax
	lda     #$08
	jsr     pusha
	jsr     _DbgMemDump
	jsr     _cputsxy
	ldy     #$03
	ldx     #$00
	lda     #$08
	jsr     addeqysp
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	bra     L0566
L03F1:	dey
	jsr     ldaxysp
	ldy     #$2E
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ DumpHome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DumpHome: near

.segment	"CODE"

	stz     _DumpAddr
	stz     _DumpAddr+1
	rts

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetArg16 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetArg16: near

.segment	"CODE"

	lda     _brk_pc
	ldx     _brk_pc+1
	ina
	bne     L043D
	inx
L043D:	ldy     #$01
	jmp     ldaxidx

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ GetStack16 (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetStack16: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp)
	clc
	adc     _DbgSP
	bcc     L0569
	inx
L0569:	sta     ptr1
	stx     ptr1+1
	ldx     #$01
	txa
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     ldaxi
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ SetRTSBreak (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SetRTSBreak: near

.segment	"CODE"

	lda     #$00
	jsr     _GetStack16
	ina
	bne     L0445
	inx
L0445:	jmp     _DbgSetTmpBreak

.endproc

; ---------------------------------------------------------------
; void __near__ DbgEntry (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DbgEntry: near

.segment	"DATA"

L04B0:
	.byte	$01

.segment	"CODE"

	jsr     decsp2
	lda     L04B0
	beq     L04B2
	lda     #$00
	stz     L04B0
	jsr     _RedrawStatic
	jsr     _InitAsm
	jsr     _InitReg
	jsr     _InitStack
	jsr     _InitCStack
	jsr     _UpdateDump
L04B2:	jsr     _AsmHome
	jsr     _UpdateReg
	jsr     _StackHome
	jsr     _CStackHome
	lda     #$00
	sta     (sp)
	jmp     L056E
L04C3:	lda     _ActiveFrame
	ldx     _ActiveFrame+1
	jsr     aslax1
	clc
	adc     #<(_Frames)
	tay
	txa
	adc     #>(_Frames)
	tax
	tya
	jsr     ldaxi
	ldy     #$0C
	jsr     ldaxidx
	jsr     callax
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	jeq     L056D
	cmp     #$01
	beq     L04DB
	cmp     #$03
	beq     L04E0
	cmp     #$04
	beq     L04E7
	cmp     #$0A
	jeq     L04FB
	cmp     #$0E
	jeq     L04F1
	cmp     #$0F
	jeq     L04FB
	cmp     #$20
	beq     L04F1
	cmp     #$31
	beq     L056C
	cmp     #$32
	beq     L056C
	cmp     #$33
	beq     L056C
	cmp     #$34
	beq     L056C
	cmp     #$35
	beq     L056C
	cmp     #$3F
	beq     L04DB
	cmp     #$63
	beq     L056D
	cmp     #$68
	beq     L04E7
	cmp     #$71
	jeq     L0515
	cmp     #$72
	jeq     L0511
	cmp     #$73
	beq     L050B
	cmp     #$75
	beq     L04E0
	jmp     L056E
L056C:	lda     (sp),y
	ldy     #$31
	jsr     decaxy
	jsr     pushax
	lda     #$00
	jsr     _ActivateFrame
	jmp     L056E
L04DB:	jsr     _HelpHandler
	bra     L056E
L04E0:	jsr     _SetRTSBreak
	lda     #$01
	sta     (sp)
	bra     L056E
L04E7:	lda     _brk_pc
	ldx     _brk_pc+1
	cpx     _AsmAddr+1
	bne     L056F
	cmp     _AsmAddr
	beq     L056E
L056F:	lda     _AsmAddr
	ldx     _AsmAddr+1
	jsr     _DbgSetTmpBreak
	lda     #$01
	sta     (sp)
	bra     L056E
L04F1:	tya
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L056E
	lda     #$01
	sta     (sp)
	bra     L056E
L04FB:	txa
	jsr     _SingleStep
	jsr     _DbgTmpBreaksOk
	tax
	beq     L056E
	lda     #$01
	sta     (sp)
	bra     L056E
L056D:	tya
	sta     (sp)
	bra     L056E
L050B:	lda     _brk_pc
	ldx     _brk_pc+1
	jsr     _DbgDisAsmLen
	clc
	adc     _brk_pc
	sta     _brk_pc
	txa
	adc     _brk_pc+1
	sta     _brk_pc+1
	jsr     _InitAsm
	bra     L056E
L0511:	lda     _ActiveFrame
	jsr     _Redraw
	bra     L056E
L0515:	jsr     _clrscr
	ldx     #$00
	lda     #$01
	jsr     _exit
L056E:	lda     (sp)
	jeq     L04C3
	jmp     incsp2

.endproc

